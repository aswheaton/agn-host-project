%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPB90F.tmp.pdf
%%Creator: Adobe Acrobat 11.0.17
%%For: paw
%%CreationDate: 20/10/2016, 09:36:54
%%BoundingBox: 0 0 426 426
%%HiResBoundingBox: 0 0 425.1970 425.1970
%%CropBox: 0 0 425.1970 425.1970
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1038 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   xmp:CreatorTool="Adobe Illustrator(TM) 7.0"
   xmp:ModifyDate="2016-10-20T09:36:27+01:00"
   xmp:CreateDate="2016-10-20T09:36:27+01:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:3bb0da7d-f24a-4e86-97d4-5e088c90bd36"
   xmpMM:InstanceID="uuid:733e6a03-0d61-4ec0-a538-7c13b11615cc">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">UoE 2C CMYK.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Visual Resources</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -425.197 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 425.197 li
425.197 425.197 li
425.197 0 li
cp
clp
31.646 169.855 mo
35.352 170.68 36.524 170.211 37.115 167.585 cv
38.028 167.785 li
35.591 178.683 li
34.678 178.478 li
35.171 176.276 34.815 174.845 30.572 173.898 cv
7.119 168.649 li
6.123 173.107 li
5.195 177.238 5.957 179.381 9.116 180.368 cv
8.916 181.281 li
1.885 179.709 li
2.085 178.795 li
2.559 178.449 2.935 178.029 3.315 177.326 cv
3.633 176.662 3.955 175.719 4.248 174.435 cv
7.847 158.332 li
8.447 155.646 8.403 154.342 7.813 153.195 cv
8.027 152.228 li
15.059 153.8 li
14.927 154.391 li
12.222 154.406 10.166 155.016 9.072 159.904 cv
8.027 164.572 li
31.646 169.855 li
false sop
1 .848966 .335698 .264408 cmyk
f
33.306 134.875 mo
41.509 138.879 li
44.922 140.544 46.421 140.232 47.603 137.81 cv
48.443 138.22 li
43.448 148.454 li
42.608 148.044 li
43.672 145.866 43.433 144.47 39.678 142.634 cv
22.031 134.025 li
18.672 132.385 17.198 132.521 15.967 135.046 cv
15.127 134.636 li
20.117 124.406 li
20.957 124.816 li
19.873 127.038 20.254 128.507 23.863 130.271 cv
31.919 134.201 li
39.444 118.778 li
31.387 114.848 li
27.93 113.158 26.529 113.395 25.347 115.817 cv
24.507 115.407 li
29.448 105.273 li
30.288 105.683 li
29.107 108.104 29.859 109.45 33.223 111.09 cv
50.87 119.699 li
54.229 121.339 55.753 121.103 56.934 118.681 cv
57.774 119.091 li
52.828 129.225 li
51.988 128.815 li
53.077 126.593 52.794 125.29 49.034 123.458 cv
40.83 119.452 li
33.306 134.875 li
f
70.562 83.06 mo
69.966 83.78 li
67.471 82.562 66.9 82.73 64.825 85.223 cv
59.825 91.224 li
68.487 98.441 li
69.673 99.427 70.489 99.393 71.617 98.04 cv
75.137 93.814 li
78.091 90.264 78.663 89.237 76.69 85.16 cv
77.291 84.439 li
80.895 89.305 li
66.358 106.759 li
65.64 106.16 li
67.222 104.259 67.335 102.921 64.122 100.245 cv
48.995 87.642 li
45.991 85.145 44.585 85.116 42.861 87.186 cv
42.139 86.588 li
56.68 69.134 li
60.738 72.513 li
60.347 72.979 li
57.232 71.311 56.314 71.98 54.097 74.641 cv
48.287 81.615 li
58.643 90.24 li
64.273 83.477 li
65.645 81.83 65.879 80.951 64.087 78.888 cv
64.688 78.167 li
70.562 83.06 li
f
129.602 47.552 mo
128.694 52.103 126.628 55.159 122.986 57.213 cv
116.326 60.965 110.998 57.781 108.327 53.035 cv
100.71 39.522 li
98.659 35.882 97.297 35.701 95.144 36.917 cv
94.685 36.102 li
104.602 30.513 li
105.061 31.329 li
102.81 32.598 102.355 33.924 104.328 37.423 cv
112.155 51.319 li
114.534 55.538 118.582 57.232 123.23 54.615 cv
126.394 52.833 128.279 49.686 128.523 45.635 cv
119.211 29.102 li
117.429 25.941 116.086 25.242 113.831 26.39 cv
113.372 25.574 li
123.049 20.12 li
123.508 20.935 li
121.208 22.232 120.989 23.743 122.854 27.052 cv
132.488 44.158 li
134.514 47.752 135.95 47.952 138.059 46.766 cv
138.518 47.579 li
131.765 51.385 li
129.602 47.552 li
f
179.573 35.091 mo
178.665 35.323 li
150.344 14.302 li
150.237 14.329 li
155.725 35.748 li
156.516 38.839 158.025 39.644 160.798 38.934 cv
161.028 39.84 li
151.76 42.215 li
151.526 41.309 li
154.084 40.652 155.105 39.539 153.972 35.118 cv
149.402 17.268 li
148.528 13.858 147.131 12.173 143.425 12.781 cv
143.195 11.875 li
151.028 9.86801 li
176.189 28.748 li
176.291 28.719 li
171.721 10.872 li
170.701 6.87503 169.372 6.13501 166.711 6.81702 cv
166.477 5.91101 li
175.696 3.55203 li
175.925 4.45602 li
172.942 5.22202 172.297 6.69202 173.21 10.261 cv
179.573 35.091 li
f
205.267 26.688 mo
205.457 30.533 206.449 31.639 209.085 31.507 cv
209.129 32.442 li
197.816 33.006 li
197.767 32.071 li
200.35 31.942 201.287 30.904 201.092 26.895 cv
200.116 7.28299 li
199.92 3.328 198.988 2.327 196.297 2.461 cv
196.248 1.52899 li
207.567 .964996 li
207.611 1.89999 li
204.974 2.02899 204.1 3.284 204.29 7.07599 cv
205.267 26.688 li
f
237.103 34.59 mo
236.234 34.473 li
229.955 7.83902 li
228.988 3.82501 228.421 2.25302 225.492 1.75 cv
225.614 .825012 li
236.957 2.33102 li
236.83 3.259 li
234.598 2.961 233.348 4.01602 233.949 6.59402 cv
238.9 27.781 li
248.739 9.28201 li
250.072 6.74002 249.809 4.98502 246.972 4.60703 cv
247.099 3.681 li
256.2 4.892 li
256.068 5.87402 li
253.725 5.561 251.742 7.129 249.594 11.172 cv
237.103 34.59 li
f
286.811 35.198 mo
285.932 34.876 li
286.24 32.119 285.888 31.638 282.841 30.525 cv
275.507 27.84 li
271.635 38.43 li
271.103 39.876 271.41 40.633 273.065 41.238 cv
278.232 43.128 li
282.568 44.715 283.73 44.905 286.904 41.673 cv
287.783 41.995 li
284.419 47.029 li
263.085 39.226 li
263.407 38.347 li
265.731 39.197 267.025 38.853 268.461 34.927 cv
275.229 16.435 li
276.572 12.768 276.123 11.433 273.588 10.505 cv
273.91 9.629 li
295.244 17.431 li
293.432 22.39 li
292.861 22.182 li
293.378 18.684 292.441 18.047 289.189 16.858 cv
280.664 13.738 li
276.035 26.394 li
284.301 29.417 li
286.313 30.154 287.221 30.076 288.559 27.698 cv
289.438 28.018 li
286.811 35.198 li
f
322.612 33.074 mo
325.366 34.89 li
329.404 37.554 330.385 41.758 328.09 45.249 cv
326.098 48.279 322.358 50.161 317.905 47.227 cv
314.682 45.108 li
322.612 33.074 li
cp
313.96 46.211 mo
316.069 47.603 li
320.893 50.779 318.188 57.889 319.165 67.097 cv
324.546 70.637 li
325.053 69.856 li
320.903 66.66 324.965 56.89 322.143 50.484 cv
326.762 51.878 329.917 50.471 331.821 47.578 cv
334.121 44.087 333.515 38.811 327.592 34.91 cv
316.801 27.798 li
316.294 28.579 li
318.403 29.971 318.852 31.189 316.577 34.634 cv
305.722 51.121 li
303.388 54.659 302.001 54.666 299.98 53.335 cv
299.467 54.114 li
308.93 60.349 li
309.443 59.568 li
307.285 58.145 307.094 56.636 309.214 53.421 cv
313.96 46.211 li
f
364.156 74.776 mo
363.497 74.109 li
366.48 70.477 365.46 66.851 363.223 64.578 cv
360.909 62.227 357.955 61.815 355.875 63.86 cv
351.724 67.95 356.261 74.754 356.212 81.131 cv
356.187 84.242 355.162 86.024 353.673 87.489 cv
350.142 90.963 344.464 90.919 340.992 87.391 cv
338.638 85.001 337.847 81.844 337.114 81.1 cv
336.729 80.707 336.182 80.702 335.401 81.087 cv
334.746 80.419 li
340.821 74.439 li
341.475 75.106 li
337.364 79.234 339.346 83.995 341.275 85.956 cv
343.941 88.658 347.281 88.917 349.713 86.527 cv
353.59 82.706 349.454 74.896 349.493 69.915 cv
349.512 67.195 350.538 65.101 352.301 63.365 cv
355.753 59.969 360.533 60.125 364.122 63.768 cv
366.475 66.16 366.734 68.145 367.584 69.007 cv
367.93 69.358 368.087 69.361 368.79 68.978 cv
369.406 69.605 li
364.156 74.776 li
f
366.827 108.49 mo
363.663 110.682 363.248 112.108 364.747 114.279 cv
363.98 114.811 li
357.525 105.499 li
358.297 104.967 li
359.766 107.091 361.143 107.34 364.444 105.055 cv
380.587 93.871 li
383.839 91.615 384.196 90.297 382.662 88.08 cv
383.429 87.548 li
389.884 96.862 li
389.118 97.394 li
387.614 95.223 386.085 95.145 382.965 97.306 cv
366.827 108.49 li
f
382.516 137.082 mo
379.069 138.664 378.414 139.748 379.538 142.199 cv
378.688 142.59 li
374.039 132.443 li
374.889 132.053 li
375.827 134.104 376.979 135.026 380.929 133.215 cv
402.775 123.205 li
400.875 119.052 li
399.113 115.202 397.208 113.957 394.093 115.082 cv
393.702 114.232 li
400.255 111.229 li
400.646 112.079 li
400.475 112.641 400.431 113.205 400.553 113.996 cv
400.705 114.716 401.017 115.661 401.564 116.862 cv
408.439 131.862 li
409.587 134.362 410.412 135.373 411.574 135.93 cv
411.989 136.828 li
405.436 139.831 li
405.182 139.279 li
407.331 137.629 408.596 135.9 406.511 131.35 cv
404.519 127.003 li
382.516 137.082 li
f
394.942 175.397 mo
391.231 176.193 390.206 177.199 390.772 179.831 cv
389.859 180.031 li
387.452 168.791 li
388.365 168.59 li
388.873 170.958 389.654 172.252 394.063 171.31 cv
403.746 169.235 li
412.56 160.485 li
415.489 157.609 415.992 156.544 415.582 154.103 cv
416.495 153.908 li
419.073 165.954 li
418.16 166.149 li
417.433 162.76 416.168 162.638 414.552 164.279 cv
406.495 172.36 li
415.289 175.597 li
418.028 176.583 420.314 176.208 419.762 173.624 cv
420.675 173.429 li
422.481 181.872 li
421.568 182.072 li
420.899 179.738 420.084 179.069 417.022 177.921 cv
404.62 173.322 li
394.942 175.397 li
f
21.138 255.332 mo
29.912 252.812 37.085 255.664 39.141 262.803 cv
40.933 269.033 37.056 275.644 27.539 278.389 cv
20.196 280.498 11.811 278.623 9.624 271.006 cv
7.661 264.189 12.309 257.871 21.138 255.332 cv
cp
19.854 250.664 mo
10.864 253.252 5.874 262.353 8.476 271.396 cv
11.074 280.43 20.157 285.547 29.146 282.959 cv
37.969 280.42 42.857 271.348 40.274 262.363 cv
37.608 253.115 28.838 248.076 19.854 250.664 cv
f
32.408 311.846 mo
29.063 313.75 28.526 315.137 29.835 317.432 cv
29.024 317.901 li
23.404 308.057 li
24.219 307.588 li
25.528 309.883 26.944 310.157 30.338 308.213 cv
47.388 298.487 li
50.831 296.524 51.276 295.196 49.967 292.901 cv
50.778 292.432 li
61.49 311.211 li
56.617 313.985 li
56.266 313.369 li
59.225 310.791 58.956 309.873 57.262 306.905 cv
53.282 299.932 li
41.817 306.475 li
45.88 313.594 li
47.052 315.645 48.541 315.811 50.875 314.795 cv
51.31 315.557 li
43.619 319.951 li
43.184 319.19 li
45.089 317.969 45.689 316.368 44.596 314.453 cv
40.479 307.237 li
32.408 311.846 li
f
92.843 372.609 mo
92.12 372.023 li
93.322 369.513 93.146 368.947 90.636 366.896 cv
84.601 361.935 li
77.447 370.656 li
76.47 371.847 76.514 372.668 77.877 373.781 cv
82.125 377.267 li
85.699 380.197 86.735 380.763 90.792 378.752 cv
91.52 379.347 li
86.681 382.99 li
69.117 368.586 li
69.708 367.863 li
71.622 369.435 72.96 369.533 75.611 366.3 cv
88.097 351.076 li
90.572 348.058 90.592 346.652 88.507 344.943 cv
89.098 344.22 li
106.666 358.625 li
103.317 362.707 li
102.848 362.326 li
104.493 359.191 103.815 358.283 101.139 356.086 cv
94.122 350.324 li
85.577 360.744 li
92.379 366.33 li
94.039 367.687 94.918 367.912 96.969 366.105 cv
97.692 366.701 li
92.843 372.609 li
f
128.752 373.634 mo
134.196 376.144 li
143.239 380.304 143.508 388.79 140.354 395.636 cv
136.765 403.429 130.261 406.359 123.171 403.097 cv
120.222 401.74 li
117.575 400.519 116.97 399.211 119.016 394.758 cv
128.752 373.634 li
cp
114.758 394.006 mo
113.127 397.56 111.715 398.117 109.416 397.062 cv
109.025 397.912 li
122.614 404.172 li
133.855 409.347 141.462 404.797 144.773 397.609 cv
148.206 390.168 146.394 380.431 135.456 375.382 cv
122.219 369.288 li
121.823 370.138 li
124.226 371.241 124.567 372.736 122.976 376.173 cv
114.758 394.006 li
f
170.208 413.888 mo
169.378 417.648 170.042 418.986 172.62 419.552 cv
172.42 420.46 li
161.355 418.029 li
161.556 417.111 li
164.08 417.667 165.262 416.915 166.126 412.989 cv
170.35 393.82 li
171.199 389.952 170.564 388.741 167.933 388.165 cv
168.133 387.247 li
179.198 389.689 li
178.998 390.597 li
176.419 390.031 175.247 391.007 174.432 394.718 cv
170.208 413.888 li
f
227.201 424.054 mo
226.268 424.064 li
203.748 396.915 li
203.636 396.925 li
203.88 419.035 li
203.914 422.218 205.194 423.361 208.055 423.332 cv
208.065 424.269 li
198.494 424.367 li
198.485 423.439 li
201.121 423.41 202.381 422.57 202.327 418 cv
202.127 399.581 li
202.088 396.056 201.131 394.093 197.386 393.8 cv
197.376 392.863 li
205.462 392.775 li
225.419 417.091 li
225.531 417.082 li
225.326 398.663 li
225.282 394.533 224.169 393.507 221.42 393.536 cv
221.41 392.599 li
230.927 392.491 li
230.936 393.429 li
227.855 393.468 226.879 394.738 226.918 398.419 cv
227.201 424.054 li
f
260.175 401.467 mo
256.63 388.576 li
259.653 387.746 li
264.584 386.388 267.665 388.449 268.715 392.268 cv
269.765 396.086 267.758 399.377 263.305 400.598 cv
260.175 401.467 li
cp
259.062 413.176 mo
260.087 416.887 259.491 418.254 256.943 418.947 cv
257.192 419.856 li
271.191 415.998 li
276.919 414.426 280.161 410.451 278.906 405.891 cv
277.783 401.809 273.642 399.182 268.71 399.514 cv
268.681 399.406 li
272.489 396.877 273.803 394.182 272.885 390.832 cv
271.821 386.965 267.607 384.299 260.287 386.32 cv
248.832 389.465 li
249.081 390.363 li
251.625 389.67 252.792 390.373 253.857 394.25 cv
259.062 413.176 li
cp
260.497 402.629 mo
263.363 401.838 li
268.715 400.373 272.944 402.453 274.169 406.916 cv
275.395 411.369 273.046 414.24 269.97 415.08 cv
267.48 415.774 li
265.092 416.428 264.071 415.617 262.948 411.535 cv
260.497 402.629 li
f
324.263 387.384 mo
323.423 391.945 321.402 395.041 317.798 397.14 cv
311.197 400.998 305.816 397.892 303.071 393.195 cv
295.249 379.796 li
293.144 376.193 291.777 376.036 289.638 377.277 cv
289.17 376.476 li
298.999 370.734 li
299.473 371.544 li
297.241 372.843 296.807 374.181 298.833 377.648 cv
306.875 391.418 li
309.317 395.597 313.384 397.228 317.993 394.543 cv
321.128 392.717 322.974 389.533 323.15 385.48 cv
313.579 369.093 li
311.753 365.958 310.406 365.284 308.164 366.466 cv
307.691 365.656 li
317.281 360.06 li
317.759 360.861 li
315.474 362.198 315.279 363.712 317.193 366.984 cv
327.095 383.947 li
329.165 387.511 330.606 387.687 332.696 386.466 cv
333.169 387.267 li
326.48 391.183 li
324.263 387.384 li
f
336.977 344.669 mo
339.292 342.325 li
342.69 338.878 347.007 338.731 349.985 341.671 cv
352.568 344.22 353.687 348.253 349.941 352.052 cv
347.236 354.796 li
336.977 344.669 li
cp
348.174 355.724 mo
349.951 353.917 li
354.009 349.806 360.454 353.849 369.678 354.679 cv
374.195 350.099 li
373.531 349.435 li
369.585 352.892 360.796 346.993 353.96 348.526 cv
356.226 344.269 355.464 340.89 352.998 338.458 cv
350.02 335.519 344.727 335.089 339.746 340.138 cv
330.668 349.347 li
331.333 350.001 li
333.11 348.204 334.394 347.999 337.329 350.89 cv
351.387 364.757 li
354.404 367.735 354.141 369.093 352.441 370.821 cv
353.106 371.476 li
361.064 363.409 li
360.396 362.755 li
358.584 364.591 357.065 364.483 354.326 361.778 cv
348.174 355.724 li
f
399.947 311.846 mo
399.454 313.614 396.768 318.545 396.026 319.766 cv
388.814 331.602 379.273 331.201 373.072 327.422 cv
363.535 321.621 362.588 311.123 366.621 304.502 cv
368.936 300.694 371.094 300.01 372.354 297.94 cv
372.867 297.1 372.862 296.582 372.374 295.899 cv
372.891 295.049 li
380.831 299.883 li
380.372 300.635 li
374.82 298.223 369.883 301.465 367.652 305.127 cv
364.277 310.674 366.568 317.793 373.946 322.285 cv
381.837 327.1 390.523 325.948 394.415 319.561 cv
395.587 317.627 396.69 314.766 394.293 313.301 cv
391.383 311.533 li
388.096 309.532 386.461 309.561 385.118 311.768 cv
384.488 312.803 li
383.687 312.315 li
390.328 301.416 li
391.124 301.905 li
389.522 304.541 390.362 306.016 392.711 307.442 cv
399.947 311.846 li
f
399.063 275.479 mo
407.833 278.008 li
411.48 279.063 412.901 278.497 413.648 275.909 cv
414.547 276.163 li
411.393 287.101 li
410.494 286.847 li
411.163 284.522 410.689 283.184 406.676 282.022 cv
387.808 276.582 li
384.214 275.547 382.789 275.928 382.007 278.624 cv
381.109 278.37 li
384.268 267.432 li
385.167 267.686 li
384.478 270.069 385.108 271.446 388.965 272.559 cv
397.584 275.049 li
402.339 258.565 li
393.726 256.075 li
390.025 255.01 388.687 255.479 387.94 258.067 cv
387.042 257.813 li
390.167 246.973 li
391.065 247.237 li
390.318 249.825 391.29 251.026 394.883 252.061 cv
413.751 257.5 li
417.345 258.536 418.805 258.047 419.552 255.459 cv
420.45 255.713 li
417.32 266.544 li
416.422 266.29 li
417.11 263.907 416.607 262.676 412.589 261.524 cv
403.819 258.985 li
399.063 275.479 li
f
18.326 215.451 mo
18.321 216.989 17.071 218.224 15.533 218.21 cv
14.004 218.205 12.769 216.955 12.779 215.427 cv
12.788 213.888 14.038 212.658 15.567 212.663 cv
17.1 212.678 18.336 213.923 18.326 215.451 cv
f
412.345 215.51 mo
412.33 217.038 411.08 218.279 409.547 218.264 cv
408.014 218.259 406.783 217.014 406.788 215.476 cv
406.798 213.947 408.048 212.712 409.576 212.717 cv
411.11 212.732 412.35 213.977 412.345 215.51 cv
f
293.354 358.517 mo
295.571 357.365 297.602 355.822 299.736 354.494 cv
301.552 353.4 303.369 352.286 305.181 351.173 cv
306.811 349.962 308.296 348.576 309.976 347.423 cv
311.724 346.154 313.462 344.884 315.21 343.615 cv
315.581 343.273 315.942 342.912 316.304 342.56 cv
316.714 342.345 317.124 342.111 317.524 341.876 cv
319.019 340.744 320.532 339.396 321.919 338.107 cv
323.042 337.072 323.872 335.89 325.044 334.845 cv
326.206 333.79 327.495 332.833 328.686 331.778 cv
329.185 331.319 329.453 330.821 329.897 330.372 cv
330.859 329.435 331.86 328.536 332.734 327.53 cv
333.335 326.778 333.95 326.036 334.57 325.294 cv
336.743 323.204 338.716 320.909 340.533 318.575 cv
342.012 316.817 343.492 315.04 344.961 313.282 cv
345.938 311.915 346.915 310.528 347.876 309.161 cv
348.384 308.614 348.892 308.067 349.415 307.52 cv
350.992 305.313 352.583 303.106 354.165 300.88 cv
354.634 300.118 354.913 299.337 355.352 298.565 cv
355.708 298.058 356.06 297.54 356.407 297.052 cv
356.719 296.407 357.007 295.763 357.315 295.118 cv
358.389 293.282 359.395 291.446 360.391 289.591 cv
361.226 288.165 362.071 286.739 362.896 285.303 cv
363.594 283.858 364.029 282.334 364.673 280.879 cv
365.406 279.356 366.119 277.832 366.841 276.309 cv
369.278 269.746 371.681 263.164 373.634 256.387 cv
373.78 255.586 373.922 254.766 374.064 253.965 cv
374.596 251.485 375.274 248.926 375.768 246.387 cv
375.919 245.088 376.06 243.78 376.212 242.471 cv
376.568 240.352 376.998 238.069 377.291 235.911 cv
377.428 234.183 377.565 232.424 377.696 230.686 cv
377.828 230.012 377.955 229.328 378.097 228.645 cv
378.17 227.19 378.253 225.735 378.336 224.28 cv
378.414 223.547 378.639 222.869 378.678 222.102 cv
378.673 221.086 378.648 220.061 378.634 219.045 cv
379.088 212.468 379.205 205.32 378.849 198.811 cv
378.648 195.408 377.857 192.063 377.516 188.747 cv
377.125 185.237 376.861 181.76 376.158 178.42 cv
374.22 169.221 371.661 160.192 368.418 151.608 cv
367.955 150.373 367.242 149.24 366.734 148.024 cv
365.679 145.471 364.493 143.102 363.257 140.666 cv
362.852 139.968 362.452 139.274 362.046 138.576 cv
361.04 136.447 360.337 134.143 359.219 132.072 cv
358.521 130.793 357.701 129.708 356.89 128.478 cv
356.275 127.15 355.64 125.827 355.02 124.494 cv
352.696 120.878 350.279 117.33 347.862 113.783 cv
346.939 112.716 346.021 111.659 345.108 110.595 cv
344.087 109.284 343.072 107.968 342.056 106.647 cv
341.08 105.665 340.005 104.845 339.141 103.751 cv
338.647 103.124 338.359 102.46 337.837 101.83 cv
337.075 100.995 336.314 100.158 335.547 99.335 cv
335.093 98.912 334.634 98.498 334.18 98.073 cv
333.013 96.757 331.929 95.397 330.728 94.103 cv
329.673 93.119 328.628 92.13 327.583 91.141 cv
326.567 90.123 325.561 89.1 324.546 88.073 cv
323.149 86.991 321.743 85.907 320.337 84.83 cv
318.901 83.561 317.446 82.306 316.001 81.037 cv
315.044 80.311 314.009 79.811 313.032 79.166 cv
311.802 78.268 310.552 77.365 309.307 76.466 cv
308.369 75.807 307.573 75.079 306.675 74.342 cv
306.001 73.939 305.332 73.521 304.663 73.106 cv
303.759 72.469 302.861 71.834 301.948 71.192 cv
298.979 69.373 295.795 67.994 292.709 66.4 cv
291.586 65.697 290.463 64.986 289.345 64.278 cv
287.397 63.302 285.463 62.325 283.525 61.346 cv
281.938 60.584 280.288 60.033 278.662 59.395 cv
277.866 58.954 277.065 58.514 276.274 58.072 cv
275.659 57.852 275.034 57.643 274.423 57.42 cv
273.446 56.991 272.475 56.549 271.498 56.114 cv
268.446 55.006 265.243 54.212 262.079 53.243 cv
260.595 52.794 259.037 52.181 257.533 51.744 cv
254.232 50.78 250.951 50.274 247.533 49.51 cv
245.351 49.01 243.06 48.38 240.829 48.001 cv
239.383 47.799 237.923 47.611 236.493 47.408 cv
234.085 46.908 231.405 46.478 228.89 46.173 cv
227.938 46.151 226.961 46.126 225.99 46.092 cv
225.326 46.002 224.642 45.916 223.958 45.821 cv
222.65 45.802 221.341 45.78 220.023 45.76 cv
217.079 45.553 213.958 45.313 210.858 45.294 cv
209.656 45.643 207.967 45.431 206.634 45.423 cv
205.032 45.423 203.431 45.428 201.829 45.431 cv
201.39 45.506 200.955 45.572 200.516 45.645 cv
199.402 45.672 198.289 45.702 197.176 45.728 cv
196.585 45.868 195.994 46.009 195.403 46.153 cv
194.827 46.231 194.251 46.295 193.67 46.366 cv
193.113 46.366 192.547 46.314 192.068 46.505 cv
191.736 46.556 191.394 46.6 191.058 46.641 cv
190.34 46.641 189.578 46.619 189.012 46.922 cv
187.449 46.915 185.125 47.115 183.914 47.772 cv
183.577 47.811 183.235 47.857 182.898 47.909 cv
181.907 47.899 180.599 48.026 179.832 48.475 cv
177.264 48.458 175.139 49.549 172.81 50.103 cv
171.57 50.391 170.095 50.533 169.036 51.178 cv
168.02 51.173 166.921 51.424 166.121 51.883 cv
164.499 51.881 163.093 52.818 161.706 53.358 cv
160.886 53.673 159.861 53.69 159.128 54.178 cv
157.507 54.173 156.072 55.111 154.734 55.711 cv
153.811 56.112 152.883 56.49 151.96 56.881 cv
146.96 58.983 142.077 61.375 137.272 63.875 cv
136.462 64.4 135.646 64.915 134.836 65.431 cv
129.079 68.346 123.391 71.544 118.298 75.689 cv
116.794 76.764 115.29 77.838 113.791 78.912 cv
113.005 79.618 112.213 80.331 111.432 81.034 cv
109.967 82.111 108.439 83.026 107.023 84.22 cv
104.127 86.666 101.403 89.413 98.717 92.069 cv
97.072 93.563 95.412 95.065 93.756 96.561 cv
93.19 97.208 92.623 97.86 92.067 98.517 cv
91.315 99.22 90.558 99.916 89.811 100.612 cv
88.624 101.823 87.794 103.275 86.647 104.454 cv
85.651 105.468 84.655 106.415 83.756 107.533 cv
83.351 108.092 82.926 108.654 82.521 109.206 cv
80.778 111.166 79.083 113.085 77.584 115.194 cv
76.554 116.796 75.528 118.4 74.498 120.006 cv
73.014 121.913 71.344 124.376 70.201 126.466 cv
69.859 127.15 69.522 127.833 69.185 128.517 cv
68.189 130.183 67.188 131.838 66.187 133.488 cv
65.318 135.222 64.732 137.072 63.863 138.811 cv
63.458 139.484 63.058 140.148 62.657 140.822 cv
61.812 142.385 61.1 143.952 60.201 145.5 cv
59.791 146.501 59.376 147.507 58.966 148.518 cv
58.463 149.548 57.975 150.583 57.477 151.618 cv
57.076 152.809 56.666 153.991 56.266 155.183 cv
55.777 156.462 55.284 157.736 54.791 159.02 cv
52.325 166.994 50.255 174.997 48.56 183.44 cv
48.419 185.037 48.277 186.623 48.135 188.22 cv
47.915 190.061 47.281 192.068 47.129 193.899 cv
47.007 195.315 47.061 196.936 46.661 198.264 cv
46.558 199.382 46.456 200.5 46.353 201.604 cv
46.099 208.44 46.285 214.939 46.46 221.555 cv
46.548 224.729 47.173 227.912 47.452 231.028 cv
47.525 232.385 47.588 233.733 47.657 235.1 cv
48.091 239.356 48.814 243.672 49.478 247.911 cv
49.791 248.985 50.084 250.059 50.382 251.143 cv
51.095 254.483 51.842 257.715 52.809 260.918 cv
53.092 261.641 53.375 262.373 53.653 263.106 cv
53.834 263.868 54.024 264.629 54.2 265.391 cv
55.46 268.936 56.72 272.481 57.975 276.016 cv
58.6 277.344 59.225 278.692 59.84 280.02 cv
60.201 280.899 60.387 281.885 60.763 282.754 cv
61.725 285.02 63.131 287.052 64.273 289.239 cv
65.182 291.017 66.256 292.716 67.154 294.503 cv
67.413 295.138 67.677 295.782 67.935 296.427 cv
68.248 296.817 68.56 297.188 68.873 297.579 cv
69.215 298.321 69.557 299.063 69.903 299.815 cv
70.748 301.3 71.778 302.735 72.852 304.103 cv
73.492 304.923 74.019 305.841 74.669 306.661 cv
75.543 307.765 76.529 308.77 77.35 309.903 cv
77.979 310.841 78.609 311.769 79.249 312.696 cv
80.435 314.122 81.627 315.548 82.829 316.954 cv
83.815 318.204 84.801 319.454 85.783 320.704 cv
87.018 321.993 88.248 323.282 89.484 324.571 cv
90.495 325.743 91.369 327.13 92.536 328.204 cv
94.201 329.728 95.836 331.28 97.374 332.833 cv
98.195 333.663 99.015 334.493 99.831 335.314 cv
101.178 336.486 102.75 337.326 104.044 338.556 cv
105.294 339.767 106.549 340.978 107.819 342.189 cv
108.732 342.892 109.645 343.595 110.553 344.288 cv
111.676 345.255 112.634 346.369 113.854 347.228 cv
115.319 348.224 116.686 349.386 118.215 350.265 cv
119.226 350.851 120.305 351.154 121.276 351.798 cv
122.409 352.599 123.542 353.4 124.675 354.201 cv
125.788 354.923 127.058 355.499 128.195 356.193 cv
132.487 358.83 136.823 361.095 141.335 363.253 cv
143.317 364.21 145.192 365.431 147.317 366.154 cv
149.265 366.915 151.204 367.667 153.152 368.419 cv
153.86 368.615 154.578 368.829 155.281 369.025 cv
157.195 369.757 159.094 370.49 161.003 371.232 cv
161.516 371.378 162.029 371.535 162.546 371.681 cv
164.192 372.326 165.828 373.087 167.546 373.556 cv
169.622 373.966 171.697 374.357 173.772 374.767 cv
176.863 375.412 180.096 376.369 183.25 376.857 cv
184.402 376.955 185.555 377.052 186.727 377.13 cv
188.255 377.326 189.793 377.687 191.385 377.833 cv
192.596 377.902 193.797 377.99 195.008 378.068 cv
195.794 378.185 196.575 378.302 197.352 378.429 cv
198.177 378.458 199.002 378.488 199.822 378.517 cv
201.722 378.79 203.602 379.083 205.496 379.367 cv
206.463 379.415 207.439 379.455 208.406 379.494 cv
208.992 379.425 209.578 379.357 210.165 379.298 cv
211.893 379.308 213.954 379.494 215.687 379.572 cv
216.795 379.601 217.831 379.523 218.89 379.572 cv
221.068 379.689 223.143 379.259 225.165 378.966 cv
226.078 378.927 227 378.898 227.914 378.869 cv
229.154 378.712 230.487 378.497 231.707 378.4 cv
236.219 377.99 240.584 377.482 244.95 376.622 cv
246.415 376.232 247.885 375.851 249.35 375.46 cv
251.185 375.099 253.021 374.708 254.852 374.337 cv
255.81 374.064 256.654 373.585 257.558 373.224 cv
259.057 372.785 260.546 372.345 262.045 371.896 cv
262.685 371.662 263.319 371.447 263.959 371.212 cv
265.048 370.919 266.024 370.802 267.103 370.47 cv
269.306 369.708 271.503 368.927 273.72 368.156 cv
275.024 367.521 276.342 366.915 277.651 366.29 cv
278.93 365.802 280.205 365.216 281.425 364.65 cv
281.782 364.435 282.123 364.21 282.475 364.005 cv
283.798 363.38 285.175 362.755 286.464 362.091 cv
287.963 361.232 289.462 360.392 290.961 359.533 cv
291.733 359.142 292.587 358.917 293.354 358.517 cv
f
210.819 365.294 mo
210.77 365.294 210.721 365.294 210.673 365.294 cv
210.673 365.236 210.673 365.196 210.673 365.138 cv
210.448 365.138 210.341 364.864 210.214 364.708 cv
209.652 363.81 209.085 362.911 208.524 362.013 cv
207.347 360.646 206.16 359.259 204.984 357.872 cv
201.448 354.513 197.313 351.642 192.977 349.767 cv
192.083 349.444 191.175 349.103 190.281 348.78 cv
189.285 348.351 188.367 347.775 187.327 347.394 cv
186.361 347.032 185.32 346.915 184.285 346.73 cv
183.24 346.525 182.166 346.232 181.087 345.997 cv
178.865 345.548 176.629 344.884 174.378 344.474 cv
172.195 344.2 170.022 343.937 167.84 343.653 cv
166.101 343.566 164.431 343.595 162.752 343.439 cv
154.871 342.638 147.068 341.876 139.45 340.646 cv
136.858 340.206 134.319 340.196 131.77 339.747 cv
129.245 339.298 126.706 338.565 124.304 337.804 cv
122.971 337.384 121.609 337.071 120.32 336.583 cv
119.05 336.017 117.785 335.45 116.521 334.874 cv
115.647 334.473 114.773 334.083 113.899 333.702 cv
113.298 333.311 112.683 332.911 112.067 332.52 cv
111.774 332.364 111.481 332.208 111.188 332.042 cv
109.108 330.372 107.468 328.067 105.866 326.036 cv
104.636 324.464 103.991 322.637 103.405 320.743 cv
103.127 319.805 102.834 318.868 102.546 317.93 cv
101.623 313.575 101.716 309.024 101.667 304.258 cv
101.598 303.34 101.511 302.423 101.432 301.485 cv
101.559 297.95 101.779 294.356 101.852 290.86 cv
101.823 290.089 101.799 289.317 101.764 288.536 cv
101.784 285 101.803 281.455 101.823 277.91 cv
101.838 275.586 102.018 273.291 101.999 271.074 cv
101.901 261.533 102.072 251.875 102.287 242.246 cv
102.209 240.889 102.136 239.531 102.052 238.167 cv
102.038 236.663 102.204 235.237 102.209 233.811 cv
102.184 233.127 102.165 232.444 102.15 231.76 cv
102.331 229.592 102.516 227.399 102.692 225.217 cv
102.731 223.523 102.585 221.858 102.585 220.276 cv
102.594 219.079 102.775 217.868 102.721 216.633 cv
102.682 215.627 102.448 214.68 102.472 213.571 cv
102.526 212.653 102.585 211.726 102.624 210.803 cv
102.604 208.952 102.482 206.936 102.521 204.983 cv
102.546 203.86 102.702 202.673 102.673 201.486 cv
102.643 200.192 102.389 198.913 102.424 197.556 cv
102.575 195.959 102.721 194.358 102.873 192.756 cv
102.912 191.194 102.78 189.694 102.785 188.239 cv
102.804 184.978 102.946 181.442 102.966 178.048 cv
102.99 177.365 103.024 176.696 103.044 176.017 cv
102.975 174.562 102.892 173.102 102.819 171.647 cv
102.936 170.392 103.044 169.123 103.171 167.858 cv
103.288 161.803 103.268 155.568 103.405 149.655 cv
103.415 147.624 103.415 145.587 103.425 143.551 cv
103.366 142.111 103.151 140.71 103.185 139.181 cv
103.239 138.21 103.288 137.233 103.346 136.271 cv
103.376 131.164 103.259 126.041 103.288 120.841 cv
103.298 118.954 103.464 117.259 103.454 115.448 cv
103.425 113.407 103.342 111.197 103.351 109.044 cv
103.361 107.65 103.512 106.283 103.522 104.823 cv
103.527 103.666 103.298 102.037 103.683 101.041 cv
103.688 100.751 104.03 100.799 104.274 100.768 cv
106.369 100.475 109.006 100.204 111.252 100.553 cv
114.021 100.978 116.814 100.528 119.704 100.548 cv
122.273 100.565 124.841 100.567 127.419 100.572 cv
128.972 100.489 130.52 100.409 132.082 100.321 cv
134.983 100.338 137.673 100.516 140.515 100.494 cv
143.923 100.462 147.61 100.411 151.155 100.431 cv
152.166 100.477 153.181 100.526 154.207 100.567 cv
155.652 100.489 157.117 100.423 158.577 100.345 cv
159.788 100.372 160.926 100.626 162.215 100.631 cv
163.845 100.643 165.325 100.489 166.863 100.528 cv
169.256 100.572 171.824 100.587 174.3 100.724 cv
175.457 100.819 176.619 100.904 177.781 100.995 cv
181.209 100.958 184.774 100.814 188.128 100.782 cv
190.413 100.846 192.694 100.904 194.969 100.97 cv
196.903 100.944 198.817 100.572 200.789 100.585 cv
202.171 100.592 203.699 100.724 205.159 100.729 cv
206.473 100.712 207.777 100.685 209.09 100.67 cv
210.59 100.79 212.098 100.907 213.602 101.036 cv
214.769 100.978 215.936 100.924 217.098 100.868 cv
219.384 100.956 221.654 101.034 223.939 101.119 cv
225.013 101.036 226.078 100.956 227.142 100.868 cv
233.358 100.704 239.213 100.86 245.483 100.802 cv
246.855 100.721 248.212 100.633 249.565 100.553 cv
252.363 100.477 255.322 100.67 258.007 100.477 cv
258.603 100.423 259.174 100.36 259.76 100.314 cv
262.094 100.545 264.819 100.299 267.328 100.358 cv
268.368 100.372 269.228 100.626 270.234 100.651 cv
271.352 100.611 272.475 100.585 273.583 100.548 cv
275.376 100.611 277.451 100.826 279.258 100.807 cv
280.517 100.799 281.733 100.555 283.056 100.592 cv
283.979 100.673 284.892 100.76 285.82 100.846 cv
287.104 100.868 288.564 100.685 289.892 100.79 cv
290.815 100.931 291.733 101.063 292.666 101.197 cv
293.432 101.166 294.214 101.134 294.995 101.1 cv
295.815 101.151 296.636 101.192 297.47 101.236 cv
298.291 101.205 299.116 101.158 299.936 101.114 cv
301.499 101.095 302.993 101.276 304.448 101.173 cv
306.822 100.995 309.151 101.346 311.587 101.322 cv
312.749 101.249 313.911 101.166 315.073 101.087 cv
315.855 101.131 316.626 101.17 317.407 101.212 cv
318.14 101.217 319.058 101.127 319.673 101.373 cv
319.722 101.412 319.78 101.466 319.839 101.505 cv
320.357 102.272 320.161 103.692 320.152 104.728 cv
320.132 108.053 319.986 111.271 320.122 114.474 cv
320.2 116.505 320.171 118.829 320.191 120.885 cv
320.152 121.561 320.122 122.245 320.083 122.911 cv
320.132 124.376 320.2 125.821 320.249 127.277 cv
320.171 128.741 320.093 130.197 320.005 131.662 cv
320.122 133.547 320.249 135.451 320.366 137.336 cv
320.278 138.053 320.2 138.791 320.113 139.518 cv
320.064 140.788 320.318 141.935 320.308 143.161 cv
320.23 144.42 320.152 145.68 320.073 146.94 cv
320.064 148.493 320.034 150.045 320.015 151.593 cv
319.937 152.76 319.839 153.927 319.761 155.085 cv
319.898 156.984 320.034 158.874 320.152 160.763 cv
320.103 161.447 320.044 162.131 319.976 162.809 cv
319.917 164.381 319.8 165.963 319.82 167.467 cv
319.849 170.163 320.073 173.17 320.103 175.763 cv
320.034 176.349 319.966 176.93 319.907 177.516 cv
319.956 178.727 320.005 179.928 320.054 181.14 cv
319.986 182.541 319.849 184.123 319.839 185.666 cv
319.839 186.794 320.083 187.771 320.054 188.869 cv
319.986 189.45 319.907 190.036 319.82 190.617 cv
319.859 191.389 319.888 192.17 319.907 192.937 cv
319.839 195.856 319.575 198.689 319.615 201.682 cv
319.663 203.132 319.702 204.587 319.761 206.047 cv
319.829 206.633 319.898 207.209 319.986 207.795 cv
319.947 208.772 319.888 209.733 319.849 210.705 cv
319.878 211.335 319.917 211.97 319.947 212.595 cv
319.859 213.664 319.78 214.729 319.693 215.798 cv
319.702 217.248 320.054 218.772 319.995 220.315 cv
319.839 224.567 319.605 228.586 319.575 232.834 cv
319.566 234.553 319.839 236.077 319.829 237.786 cv
319.741 238.713 319.644 239.629 319.556 240.547 cv
319.536 242.539 319.517 244.531 319.488 246.514 cv
319.39 247.588 319.292 248.652 319.204 249.717 cv
319.253 253.75 319.312 257.774 319.37 261.797 cv
319.351 264.6 319.068 267.578 319.097 270.391 cv
319.165 271.895 319.243 273.399 319.302 274.912 cv
319.273 275.498 319.234 276.074 319.204 276.66 cv
319.194 277.725 319.185 278.789 319.175 279.863 cv
319.156 282.461 319.282 285.078 319.273 287.569 cv
319.253 290.587 319.282 293.848 319.214 297.032 cv
319.175 297.911 319.136 298.77 319.107 299.649 cv
319.165 300.186 319.234 300.714 319.302 301.251 cv
319.214 303.106 319.116 304.942 319.038 306.778 cv
318.999 308.34 319.224 309.981 319.116 311.583 cv
318.941 312.559 318.755 313.536 318.589 314.512 cv
318.452 315.567 318.316 316.622 318.189 317.686 cv
317.818 319.493 316.499 322.09 315.542 323.633 cv
314.712 324.961 313.325 325.684 312.261 326.749 cv
311.616 327.374 310.894 327.794 310.22 328.35 cv
308.98 329.415 307.744 330.538 306.338 331.28 cv
305.44 331.622 304.541 331.954 303.642 332.286 cv
301.826 333.028 300.009 333.848 298.149 334.552 cv
296.44 335.196 294.629 335.675 292.924 336.31 cv
292.509 336.466 292.065 336.622 291.636 336.769 cv
290.698 336.759 289.438 337.189 288.711 337.628 cv
287.9 337.618 287.046 337.716 286.391 338.048 cv
285.151 338.038 284.272 338.4 283.266 338.771 cv
282.954 338.868 282.632 338.956 282.314 339.044 cv
281.806 339.044 281.235 339.103 280.844 339.327 cv
279.878 339.318 277.632 339.767 276.909 340.177 cv
276.054 340.177 275.01 340.021 274.291 340.314 cv
273.788 340.314 273.217 340.372 272.826 340.597 cv
272.045 340.587 271.117 340.499 270.497 340.87 cv
270.116 340.919 269.716 340.968 269.33 341.017 cv
268.72 341.017 268.071 341.036 267.587 341.29 cv
267.045 341.29 266.42 341.359 265.986 341.573 cv
264.97 341.564 263.451 341.407 262.631 341.857 cv
262.245 341.896 261.855 341.935 261.469 341.983 cv
260.478 341.974 259.252 341.622 258.407 342.12 cv
257.826 342.111 257.133 342.032 256.655 342.247 cv
256.361 342.306 256.078 342.345 255.79 342.384 cv
254.853 342.384 253.666 342.208 252.875 342.521 cv
252.485 342.569 252.099 342.618 251.708 342.657 cv
251.415 342.706 251.122 342.755 250.839 342.794 cv
250.541 342.853 250.248 342.901 249.97 342.941 cv
249.526 342.989 249.086 343.028 248.647 343.087 cv
248.041 343.077 247.377 343.107 246.899 343.361 cv
246.508 343.4 246.122 343.458 245.732 343.497 cv
245.077 343.497 244.33 343.478 243.837 343.78 cv
243.217 343.78 242.563 343.79 242.094 344.064 cv
241.596 344.064 241.009 344.122 240.638 344.337 cv
240.174 344.337 239.681 344.415 239.32 344.63 cv
239.037 344.669 238.744 344.718 238.451 344.776 cv
237.704 344.767 236.713 344.991 236.112 345.333 cv
235.638 345.333 235.165 345.411 234.798 345.626 cv
233.275 345.616 231.962 346.31 230.673 346.808 cv
229.677 347.179 228.666 347.54 227.665 347.911 cv
225.712 347.901 223.641 349.708 222.201 350.9 cv
220.941 351.935 219.315 352.443 218.075 353.614 cv
214.618 356.818 212.538 361.124 210.819 365.294 cv
0 0 0 0 cmyk
f
227.054 344.611 mo
227.948 344.24 228.841 343.859 229.744 343.478 cv
231.517 342.951 233.377 342.619 235.247 342.209 cv
238.743 341.457 242.133 340.539 245.634 339.806 cv
246.498 339.748 247.352 339.689 248.212 339.631 cv
249.569 339.386 250.892 339.045 252.313 338.918 cv
254.154 338.849 256 338.791 257.846 338.732 cv
260.062 338.566 262.318 338.087 264.554 337.931 cv
266.556 337.785 268.544 337.716 270.507 337.463 cv
272.274 337.189 274.017 336.896 275.771 336.603 cv
276.347 336.564 276.928 336.515 277.494 336.476 cv
280.209 336.037 282.822 335.392 285.409 334.787 cv
286.298 334.572 287.143 334.474 287.993 334.23 cv
290.483 333.497 292.9 332.521 295.322 331.749 cv
297.358 331.085 299.321 330.47 301.23 329.601 cv
302.885 328.849 304.272 327.784 305.815 326.817 cv
308.564 325.089 311.567 323.253 313.276 320.353 cv
314.038 319.064 314.741 317.149 314.975 315.626 cv
315.034 314.903 315.083 314.171 315.132 313.439 cv
315.659 310.294 315.581 306.847 315.542 303.565 cv
315.6 302.403 315.639 301.232 315.698 300.06 cv
315.659 299.435 315.63 298.8 315.581 298.175 cv
315.581 296.915 315.581 295.655 315.571 294.396 cv
315.503 293.907 315.444 293.419 315.376 292.931 cv
315.425 292.501 315.473 292.062 315.522 291.622 cv
315.473 291.192 315.425 290.753 315.366 290.314 cv
315.385 289.454 315.62 288.751 315.62 287.843 cv
315.63 286.866 315.376 286.153 315.366 285.215 cv
315.356 284.102 315.639 283.282 315.669 282.169 cv
315.737 278.34 315.698 274.571 315.844 270.801 cv
315.805 269.883 315.776 268.965 315.747 268.047 cv
315.766 264.688 315.786 261.348 315.796 258.008 cv
315.991 248.887 315.874 239.161 316.079 230.042 cv
316.02 229.085 315.981 228.108 315.913 227.141 cv
315.874 226.843 315.835 226.565 315.796 226.272 cv
315.844 225.549 316.001 224.729 315.971 223.938 cv
315.913 223.401 315.854 222.869 315.796 222.336 cv
315.825 221.585 316.02 220.828 316.011 220.003 cv
315.991 218.318 315.591 216.892 315.6 215.198 cv
315.61 214.041 315.776 213.044 315.854 211.995 cv
315.844 211.462 315.825 210.92 315.805 210.393 cv
315.884 209.866 315.962 209.319 316.04 208.792 cv
315.971 208.162 315.903 207.532 315.815 206.897 cv
315.903 206.174 315.971 205.447 316.05 204.719 cv
316.03 204.06 315.825 203.518 315.825 202.82 cv
315.844 198.845 315.874 194.866 315.893 190.891 cv
315.903 189.978 316.137 189.275 316.167 188.401 cv
316.196 187.542 315.923 186.897 315.952 186.086 cv
316.02 185.647 316.098 185.203 316.167 184.768 cv
316.235 183.46 316.294 182.151 316.372 180.842 cv
316.343 178.845 316.323 176.662 316.245 174.577 cv
316.167 173.903 316.079 173.225 315.991 172.541 cv
315.981 170.9 316.274 169.46 316.255 167.883 cv
316.186 166.672 316.108 165.461 316.04 164.245 cv
316.089 154.865 315.727 145.866 316.079 136.569 cv
316.108 131.486 316.137 126.393 316.167 121.298 cv
316.264 118.537 316.059 115.526 316.03 112.851 cv
316.001 110.119 316.059 107.638 316.079 104.845 cv
316.03 104.845 315.981 104.845 315.923 104.845 cv
315.923 104.54 314.555 104.726 314.321 104.838 cv
311.616 104.804 308.891 104.76 306.186 104.726 cv
304.423 104.569 302.67 104.452 300.79 104.472 cv
300.268 104.472 299.623 104.416 299.189 104.611 cv
298.525 104.674 297.836 104.745 297.158 104.814 cv
296.186 104.696 295.209 104.569 294.233 104.447 cv
290.834 104.423 287.446 104.401 284.047 104.374 cv
283.095 104.369 280.624 104.069 279.975 104.355 cv
278.227 104.335 276.479 104.315 274.736 104.296 cv
273.412 104.201 271.517 103.639 270.214 104.149 cv
269.838 104.198 269.437 104.245 269.061 104.296 cv
267.797 104.276 266.532 104.264 265.267 104.245 cv
263.392 104.11 261.556 103.81 259.594 103.798 cv
258.139 104.22 256.049 103.515 254.642 104.064 cv
254.257 104.11 253.866 104.159 253.485 104.206 cv
251.981 104.198 250.477 104.186 248.969 104.181 cv
248.236 104.179 247.235 104.042 246.635 104.318 cv
246.18 104.315 245.541 104.267 245.17 104.452 cv
243.92 104.447 242.87 104.189 241.678 104.147 cv
238.68 104.135 235.672 104.108 232.664 104.088 cv
231.571 104.084 229.954 103.847 229.031 104.22 cv
228.685 104.259 228.343 104.306 228.001 104.357 cv
227.562 104.401 227.122 104.447 226.693 104.494 cv
224.993 104.486 222.181 103.593 220.721 104.174 cv
220.428 104.218 220.145 104.264 219.852 104.306 cv
219.207 104.306 218.455 104.318 217.952 104.591 cv
213.612 104.569 209.285 104.54 205.139 104.452 cv
204.041 104.423 202.879 104.479 201.795 104.474 cv
201.277 104.472 200.506 104.259 200.047 104.494 cv
198.973 104.474 197.918 104.46 196.844 104.447 cv
195.359 104.342 192.078 103.752 190.73 104.296 cv
189.754 104.279 188.792 104.264 187.82 104.257 cv
187.176 104.201 186.389 104.023 185.769 104.264 cv
184.91 104.259 183.758 104.101 183.015 104.396 cv
181.277 104.384 179.749 104.084 177.918 104.071 cv
177.342 104.071 176.658 104.01 176.174 104.213 cv
175.095 104.206 173.586 103.971 172.678 104.337 cv
171.023 104.33 169.377 104.323 167.722 104.315 cv
166.95 104.306 165.886 104.159 165.256 104.44 cv
163.171 104.455 161.081 104.462 158.996 104.474 cv
157.673 104.377 155.114 103.888 153.894 104.377 cv
152.585 104.369 150.32 103.925 149.236 104.345 cv
146.482 104.335 143.947 104.174 141.227 103.991 cv
140.27 103.915 138.796 103.593 137.878 104.003 cv
137.341 103.993 136.735 103.927 136.276 104.14 cv
135.236 104.128 133.815 103.913 132.936 104.259 cv
132.018 104.257 130.602 104.025 129.87 104.384 cv
126.427 104.369 122.775 104.201 119.108 104.181 cv
118.034 104.179 116.51 103.947 115.607 104.306 cv
114.284 104.303 111.383 104.025 110.363 104.423 cv
109.596 104.42 108.243 104.206 107.74 104.694 cv
106.92 105.47 107.369 109.291 107.399 110.526 cv
107.364 111.491 107.325 112.462 107.282 113.437 cv
107.311 114.323 107.443 115.243 107.34 116.193 cv
107.34 117.558 107.345 118.913 107.35 120.275 cv
107.213 123.991 107.174 127.545 107.155 131.35 cv
107.145 132.375 106.896 133.147 106.862 134.104 cv
106.818 135.119 107.037 136.096 107.028 137.009 cv
106.906 137.937 106.798 138.859 106.681 139.782 cv
106.735 141.721 106.769 143.659 106.827 145.593 cv
106.691 148.898 106.539 152.443 106.578 155.944 cv
106.627 157.302 106.676 158.659 106.725 160.007 cv
106.779 160.451 106.837 160.886 106.891 161.32 cv
106.779 162.15 106.686 162.976 106.573 163.796 cv
106.637 169.729 106.471 175.393 106.437 181.414 cv
106.422 184.026 106.564 186.438 106.51 188.987 cv
106.417 190.242 106.324 191.506 106.232 192.776 cv
106.266 194.666 106.305 196.56 106.344 198.455 cv
106.32 202.21 106.158 206.116 106.198 209.954 cv
106.261 211.311 106.315 212.664 106.373 214.026 cv
106.29 215.774 106.198 217.517 106.095 219.265 cv
106.061 226.155 106.178 233.303 106.237 240.235 cv
106.261 241.954 105.949 243.399 105.944 245.176 cv
105.929 247.022 105.919 248.868 105.919 250.704 cv
105.958 251.544 105.992 252.364 106.027 253.184 cv
105.895 259.454 105.685 265.469 105.651 271.817 cv
105.631 274.698 105.319 277.208 105.309 279.971 cv
105.309 281.182 105.314 282.393 105.319 283.604 cv
105.377 284.083 105.45 284.571 105.514 285.059 cv
105.436 285.547 105.358 286.036 105.289 286.515 cv
105.216 287.911 105.133 289.396 105.123 290.733 cv
105.114 292.442 105.153 294.327 105.226 296.124 cv
105.26 296.935 105.485 297.608 105.48 298.458 cv
105.475 299.317 105.216 299.962 105.211 300.782 cv
105.201 301.778 105.47 302.511 105.465 303.556 cv
105.416 311.075 105.504 318.321 108.917 324.054 cv
111.271 327.96 115.593 330.431 119.528 332.12 cv
122.253 333.302 125.051 334.65 128.014 335.353 cv
130.212 335.861 132.375 336.134 134.675 336.535 cv
136.423 336.837 138.239 337.287 140.075 337.482 cv
141.818 337.619 143.561 337.756 145.304 337.882 cv
149.05 338.341 152.712 339.005 156.521 339.464 cv
158.308 339.552 160.1 339.65 161.892 339.728 cv
162.668 339.894 163.445 340.06 164.226 340.236 cv
165.632 340.265 167.048 340.275 168.445 340.314 cv
169.949 340.451 171.452 340.587 172.956 340.744 cv
173.733 340.773 174.499 340.802 175.281 340.822 cv
175.959 340.998 176.643 341.154 177.327 341.31 cv
179.256 341.603 181.053 341.818 182.986 342.189 cv
183.582 342.384 184.177 342.58 184.773 342.795 cv
186.092 343.175 187.293 343.488 188.553 343.986 cv
190.379 344.65 192.219 345.314 194.051 345.968 cv
195.389 346.642 196.707 347.306 198.055 347.98 cv
198.758 348.459 199.48 348.937 200.183 349.416 cv
201.648 350.255 203.089 350.978 204.427 352.072 cv
206.072 353.41 207.195 355.041 208.64 356.584 cv
209.109 357.111 209.353 357.794 209.984 358.146 cv
209.984 358.39 210.067 358.302 210.281 358.302 cv
210.281 358.048 211.014 357.589 211.209 357.345 cv
211.522 356.877 211.815 356.408 212.117 355.939 cv
215.301 351.281 220.032 347.951 224.832 345.392 cv
225.575 345.138 226.302 344.865 227.054 344.611 cv
1 .848966 .335698 .264408 cmyk
f
227.899 122.85 mo
227.899 122.892 227.899 122.94 227.899 122.989 cv
227.753 122.989 227.601 122.989 227.46 122.989 cv
227.455 122.508 227.445 122.03 227.43 121.549 cv
227.64 120.096 228.837 119.432 229.662 118.346 cv
231.21 119.693 228.822 121.856 227.899 122.85 cv
0 0 0 0 cmyk
f
235.453 110.712 mo
236.068 110.058 236.405 109.259 236.942 108.542 cv
237.396 108.087 237.86 107.636 238.329 107.174 cv
239.374 107.284 240.35 107.443 241.518 107.494 cv
241.518 107.636 241.518 107.78 241.518 107.929 cv
239.974 107.917 235.834 113.056 234.872 114.357 cv
234.423 114.967 233.886 116.173 233.187 116.544 cv
232.758 116.759 232.26 116.581 231.913 116.366 cv
230.922 115.751 231.659 114.667 231.947 113.952 cv
232.128 113.503 232.172 112.97 232.557 112.636 cv
232.963 112.44 233.344 112.245 233.749 112.04 cv
234.32 111.608 234.882 111.166 235.453 110.712 cv
f
225.57 114.225 mo
225.814 113.478 225.809 112.658 226.18 111.974 cv
226.634 111.081 227.762 110.861 228.451 110.221 cv
229.071 109.65 229.203 108.866 229.696 108.244 cv
230.209 107.572 230.922 107.455 231.625 107.143 cv
232.201 107.143 232.787 107.147 233.368 107.15 cv
233.368 107.873 232.416 108.615 232.064 109.198 cv
231.586 109.987 231.107 110.819 230.619 111.588 cv
230.062 112.35 229.486 113.119 228.915 113.886 cv
228.529 114.479 228.392 115.158 227.914 115.702 cv
227.562 115.975 227.211 116.256 226.849 116.53 cv
226.532 116.894 226.21 117.245 225.892 117.587 cv
225.565 117.897 225.243 118.204 224.916 118.51 cv
224.32 119.228 224.32 120.28 223.529 120.907 cv
222.831 121.447 221.571 121.815 220.624 121.493 cv
220.531 121.493 220.424 121.493 220.331 121.493 cv
220.336 121.056 222.245 118.092 222.679 117.716 cv
223.08 117.37 223.666 117.345 223.983 116.884 cv
224.271 116.452 224.227 115.946 224.476 115.507 cv
224.774 114.979 225.36 114.813 225.57 114.225 cv
f
214.535 112.169 mo
214.711 111.451 215.399 110.975 215.609 110.255 cv
215.858 109.408 215.551 108.697 216.151 108.009 cv
216.766 107.303 220.512 107.872 221.727 107.228 cv
222.509 107.233 223.27 107.235 224.047 107.245 cv
224.047 107.345 224.047 107.44 224.047 107.538 cv
223.822 107.538 223.822 107.655 223.724 107.799 cv
222.587 109.401 222.001 111.258 221.205 113.026 cv
220.839 113.666 220.463 114.305 220.106 114.955 cv
219.813 115.651 219.515 116.354 219.227 117.052 cv
218.475 118.458 216.591 120.86 214.95 121.173 cv
214.95 121.127 214.95 121.075 214.95 121.024 cv
214.696 121.022 214.779 119.694 214.745 119.432 cv
214.628 118.788 214.379 118.248 214.462 117.526 cv
214.53 116.739 214.95 116.219 214.935 115.35 cv
214.901 114.278 214.276 113.243 214.535 112.169 cv
f
202.967 107.291 mo
203.504 106.72 205.609 107.096 206.444 106.856 cv
207.362 107.166 209.696 107.13 210.804 107.169 cv
210.829 107.811 210.858 108.438 210.883 109.081 cv
210.995 109.557 211.107 110.04 211.21 110.526 cv
211.122 111.053 211.029 111.588 210.946 112.118 cv
210.892 114.435 210.594 116.72 210.477 118.963 cv
210.555 120.37 210.634 121.778 210.712 123.185 cv
210.673 123.185 210.614 123.185 210.57 123.185 cv
210.57 123.136 210.57 123.092 210.57 123.038 cv
208.719 123.028 206.59 117.369 205.848 116.075 cv
205.428 115.35 204.793 114.891 204.295 114.205 cv
203.25 112.743 201.365 108.99 202.967 107.291 cv
f
191.185 108.4 mo
191.19 108.368 191.2 108.341 191.209 108.302 cv
191.512 107.421 193.812 107.402 194.637 106.933 cv
195.496 106.935 196.61 106.784 197.313 107.128 cv
199.383 108.146 200.077 111.166 200.907 113.068 cv
201.444 114.298 202.166 115.495 202.757 116.725 cv
203.153 117.382 203.534 118.029 203.919 118.678 cv
204.183 119.337 204.276 120.058 204.3 120.819 cv
204.31 121.361 204.403 122.384 203.895 122.65 cv
203.485 122.873 202.86 122.768 202.459 122.604 cv
201.703 122.314 191.234 109.316 191.175 108.639 cv
191.175 108.6 191.175 108.561 191.175 108.517 cv
191.175 108.483 191.185 108.439 191.185 108.4 cv
f
185.477 107.03 mo
186.561 107.206 187.206 107.521 187.997 108.302 cv
189.149 109.423 190.135 110.751 191.063 112.052 cv
191.537 112.716 191.805 113.458 192.372 114.108 cv
193.094 114.884 193.827 115.658 194.549 116.427 cv
195.199 117.247 195.838 118.055 196.478 118.873 cv
196.717 119.225 196.937 119.572 197.176 119.921 cv
197.635 120.333 198.109 120.741 198.573 121.141 cv
199.549 122.076 200.438 123.248 200.946 124.44 cv
200.711 124.435 200.721 124.689 200.663 124.869 cv
199.867 124.869 198.895 124.581 198.329 124.132 cv
197.391 123.185 196.458 122.225 195.516 121.268 cv
194.915 120.673 194.212 120.431 193.7 119.745 cv
192.694 118.405 191.942 116.803 190.711 115.604 cv
190.003 114.908 188.988 114.774 188.27 114.095 cv
188.25 114.071 188.226 114.044 188.207 114.025 cv
187.45 113.241 187.176 112.174 186.532 111.322 cv
185.799 110.36 184.725 109.694 184.032 108.744 cv
184.007 108.678 183.968 108.612 183.934 108.553 cv
183.924 108.514 183.915 108.478 183.905 108.444 cv
183.778 107.616 184.94 107.286 185.477 107.03 cv
f
218.06 137.345 mo
218.48 137.399 218.895 137.448 219.305 137.496 cv
220.56 137.95 221.649 139.796 221.18 141.129 cv
220.921 141.842 220.125 142.467 219.52 142.936 cv
219.1 143.263 218.485 143.756 217.879 143.707 cv
217.035 143.624 217.391 141.827 217.601 141.344 cv
217.899 140.68 218.651 140.499 218.7 139.674 cv
218.773 138.698 218.055 138.263 218.06 137.345 cv
f
220.106 131.369 mo
219.618 131.667 219.042 132.463 218.397 132.385 cv
217.503 132.277 217.137 131.115 216.551 130.573 cv
215.907 129.952 214.559 129.65 214.745 128.468 cv
214.808 127.99 215.233 127.74 215.643 127.584 cv
215.643 127.54 215.643 127.487 215.643 127.443 cv
216.62 127.628 217.294 128.126 218.172 128.497 cv
219.183 128.917 220.208 129.152 221.258 129.552 cv
221.478 129.63 221.576 129.884 221.493 130.124 cv
221.283 130.744 220.609 131.056 220.106 131.369 cv
f
218.211 149.391 mo
218.016 150.456 215.594 150.9 214.759 150.382 cv
213.524 149.616 215.887 148.082 216.399 147.677 cv
217.02 147.843 218.367 148.546 218.211 149.391 cv
f
211.869 148.468 mo
211.459 148.551 211.239 148.17 210.966 147.994 cv
210.634 147.779 210.243 147.721 209.95 147.389 cv
209.202 146.568 209.422 145.695 209.378 144.576 cv
209.344 144 209.241 143.287 209.456 142.76 cv
209.637 142.291 210.097 142.076 210.468 141.818 cv
210.941 141.842 211.327 141.871 211.688 142.096 cv
212.108 142.36 215.048 145.196 215.106 145.509 cv
215.297 146.608 212.753 148.282 211.869 148.468 cv
f
228.973 139.147 mo
228.968 140.202 228.426 141.344 227.498 141.764 cv
227.494 141.989 226.986 141.676 226.766 141.608 cv
226.771 140.553 228.143 139.787 228.836 139.147 cv
228.875 139.147 228.924 139.147 228.973 139.147 cv
f
226.234 137.272 mo
225.873 137.531 225.536 137.843 225.047 137.838 cv
224.54 137.829 224.33 137.506 224.173 137.086 cv
224.056 136.715 224.1 132.013 224.227 131.603 cv
224.383 131.095 225.165 130.665 225.521 130.255 cv
226.625 130.597 226.561 131.261 226.937 132.252 cv
227.626 134.074 228.109 135.88 226.234 137.272 cv
f
224.427 145.685 mo
224.564 145.685 224.515 145.724 224.422 145.827 cv
224.422 146.491 222.533 147.677 221.947 147.106 cv
221.116 146.305 222.142 145.465 222.674 144.943 cv
223.451 144.996 224.017 145.04 224.427 145.685 cv
f
211.107 130.319 mo
211.629 130.373 212.132 130.436 212.645 130.49 cv
213.553 130.788 216.454 133.127 216.141 134.279 cv
215.873 135.299 214.906 135.9 214.164 136.642 cv
213.397 137.389 212.469 138.273 211.366 138.405 cv
210.277 138.542 208.719 133.678 208.919 132.819 cv
209.022 132.433 210.731 130.685 211.102 130.47 cv
211.102 130.417 211.102 130.373 211.107 130.319 cv
f
207.723 142.126 mo
207.157 142.609 206.414 143.464 205.633 143.518 cv
205.028 143.562 204.735 143.132 204.344 142.795 cv
203.387 141.96 202.694 140.251 203.021 138.894 cv
203.245 138.483 203.45 138.073 203.675 137.658 cv
204.071 136.486 203.905 136.281 204.823 135.378 cv
206.073 135.964 209.671 138.62 209.305 140.315 cv
209.149 141.023 208.236 141.672 207.723 142.126 cv
f
208.377 150.104 mo
208.328 150.104 208.289 150.104 208.235 150.104 cv
208.235 150.358 207.703 150.202 207.518 150.158 cv
205.32 149.694 202.947 149.127 204.764 146.442 cv
205.115 146.491 205.418 146.5 205.677 146.715 cv
206.189 147.101 206.346 147.672 206.717 148.146 cv
207.273 148.859 208.118 149.215 208.377 150.104 cv
f
198.299 131.564 mo
198.304 131.564 199.354 130.294 199.754 130.109 cv
199.754 130.064 199.754 130.011 199.754 129.962 cv
201.585 131.154 203.074 133.283 201.18 135.216 cv
200.804 135.597 200.194 136.115 199.681 136.193 cv
197.977 136.447 198.695 134.357 198.67 133.458 cv
198.656 132.78 198.455 132.16 198.299 131.564 cv
f
201.658 128.815 mo
201.658 128.673 201.658 128.522 201.658 128.38 cv
201.951 128.302 202.244 128.214 202.542 128.146 cv
204.363 127.882 205.53 127.609 207.049 126.803 cv
207.522 126.935 208.269 126.935 208.562 127.404 cv
209.383 128.683 205.545 131.296 204.422 131.179 cv
203.177 131.037 202.527 129.552 201.658 128.815 cv
f
199.402 140.885 mo
199.675 140.963 199.949 141.051 200.222 141.124 cv
200.921 141.544 203.465 143.966 203.538 144.723 cv
203.621 145.538 201.472 147.047 200.789 147.194 cv
200.203 147.311 200.047 146.725 199.871 146.305 cv
199.197 144.635 198.709 142.804 199.402 140.885 cv
f
196.434 139.352 mo
195.018 139.704 195.321 136.959 195.36 136.056 cv
196.4 136.412 198.524 138.82 196.434 139.352 cv
f
214.442 290.762 mo
214.442 290.352 217.601 285.752 218.07 285.195 cv
218.309 284.902 218.661 284.668 218.988 284.531 cv
218.988 284.492 218.988 284.433 218.988 284.375 cv
219.715 284.385 220.448 284.394 221.18 284.394 cv
221.166 285.293 217.718 290.371 216.825 290.752 cv
216.19 291.035 215.326 290.899 214.579 290.918 cv
214.579 290.869 214.579 290.821 214.579 290.762 cv
214.535 290.762 214.481 290.762 214.442 290.762 cv
f
192.244 290.333 mo
191.434 290.675 190.203 290.46 189.256 290.479 cv
189.266 289.171 194.598 285.333 195.686 284.258 cv
196.414 284.258 197.146 284.258 197.879 284.258 cv
197.874 285.333 193.294 289.884 192.244 290.333 cv
f
231.961 319.063 mo
231.028 319.473 229.759 318.663 229.241 317.989 cv
228.68 317.227 228.484 316.348 228.191 315.469 cv
227.728 314.083 227.274 312.637 226.732 311.27 cv
226.375 310.352 225.672 309.112 225.804 308.028 cv
225.892 307.344 226.536 307.071 227.01 306.719 cv
227.43 306.827 227.728 306.954 227.977 307.325 cv
228.255 307.754 228.353 308.233 228.524 308.731 cv
228.982 310.088 229.427 311.407 229.817 312.813 cv
230.267 314.395 230.95 316.016 231.624 317.501 cv
231.732 317.754 232.449 318.848 231.961 319.063 cv
f
227.069 284.199 mo
227.767 285.176 231.927 289.785 231.688 290.655 cv
231.62 290.869 231.361 290.899 231.166 290.938 cv
229.906 290.957 228.651 290.977 227.391 290.987 cv
225.165 290.977 222.928 290.957 220.702 290.948 cv
220.702 290.899 220.702 290.86 220.707 290.801 cv
220.653 290.801 220.594 290.801 220.555 290.801 cv
220.555 290.313 220.946 289.873 221.146 289.493 cv
221.844 288.184 224.584 284.473 224.403 283.125 cv
224.349 282.676 224.017 282.334 223.612 282.197 cv
221.854 281.592 219.745 282.109 217.836 282.041 cv
216.825 281.992 214.51 281.484 213.617 281.885 cv
211.708 281.875 205.047 280.937 204.266 282.617 cv
204.07 283.017 204.339 283.486 204.505 283.828 cv
205.281 285.361 206.478 286.778 207.513 288.174 cv
208.074 289.034 208.636 289.893 209.197 290.733 cv
209.193 290.791 209.193 290.83 209.193 290.879 cv
209.051 290.938 208.9 290.977 208.758 291.035 cv
204.661 291.006 200.594 290.84 196.531 290.821 cv
196.531 290.723 196.531 290.625 196.531 290.528 cv
196.668 290.528 202.488 283.496 203.128 282.695 cv
203.128 282.51 203.084 282.51 202.977 282.402 cv
202.259 282.324 201.517 282.217 200.799 282.129 cv
199.583 282.07 198.377 282.012 197.156 281.943 cv
193.68 281.865 190.008 282.07 186.683 281.738 cv
186.688 281.328 191.649 276.543 192.313 275.859 cv
196.531 271.426 200.926 267.168 205.33 262.832 cv
206.849 261.269 208.358 259.726 209.872 258.183 cv
210.36 257.715 210.804 257.197 211.424 256.982 cv
211.424 256.894 211.424 256.787 211.429 256.689 cv
212.411 257.187 213.265 258.183 214.066 259.004 cv
215.384 260.351 216.698 261.719 218.002 263.066 cv
218.837 263.838 219.662 264.599 220.497 265.381 cv
224.237 269.277 228.226 272.969 232.045 276.836 cv
233.617 278.418 235.673 280.039 236.898 281.875 cv
236.615 281.914 236.322 281.963 236.029 282.012 cv
234.828 282.012 233.607 281.992 232.391 281.982 cv
231.937 281.972 231.361 281.836 230.946 281.982 cv
229.281 281.972 227.318 281.758 225.985 282.383 cv
225.975 283.017 226.727 283.711 227.069 284.199 cv
f
185.852 300.714 mo
186.443 299.698 197.664 300.567 199.529 300.577 cv
202.429 300.597 205.002 300.187 207.835 300.196 cv
211.619 300.216 215.633 300.499 219.481 300.519 cv
221.434 300.528 223.582 300.46 225.599 300.401 cv
230.189 300.274 234.949 300.489 239.422 300.519 cv
239.427 300.47 239.427 300.421 239.427 300.372 cv
239.661 300.372 239.686 299.083 239.686 298.771 cv
239.7 295.86 239.759 292.823 239.778 289.747 cv
239.788 287.648 239.72 285.508 240.091 283.633 cv
242.469 284.883 242.181 287.872 242.259 290.489 cv
242.293 292.11 242.406 293.985 242.352 295.724 cv
242.259 296.661 242.171 297.579 242.083 298.497 cv
242.005 299.884 242.411 301.446 241.888 302.716 cv
241.888 302.814 241.888 302.911 241.888 303.009 cv
241.844 303.009 241.791 303.009 241.742 303.009 cv
241.742 302.735 240.843 302.853 240.579 302.853 cv
238.274 302.843 236.106 302.97 233.733 302.95 cv
232.703 302.95 231.263 302.735 230.384 303.087 cv
229.515 303.087 228.367 302.911 227.615 303.214 cv
224.944 303.204 222.405 303.185 219.754 303.009 cv
218.582 302.921 216.971 302.384 215.828 302.853 cv
213.875 302.853 211.956 302.696 210.008 302.755 cv
209.578 302.774 209.045 302.638 208.694 302.814 cv
207.595 302.814 205.149 302.384 204.324 302.794 cv
203.679 302.794 202.956 302.716 202.429 302.931 cv
200.588 302.911 198.738 302.892 196.902 302.872 cv
195.803 302.814 194.573 302.774 193.406 302.716 cv
193.015 302.716 192.624 302.726 192.234 302.726 cv
191.804 302.774 191.37 302.814 190.925 302.872 cv
188.772 302.853 187.048 303.37 186.008 301.524 cv
185.915 301.349 185.72 300.939 185.852 300.714 cv
f
241.361 337.071 mo
240.931 337.677 239.622 337.843 238.919 337.93 cv
238.939 334.297 238.734 330.41 238.875 326.699 cv
238.914 325.645 238.724 324.404 238.943 323.399 cv
239.017 323.047 239.202 322.891 239.442 322.647 cv
240.189 322.656 240.892 322.647 241.478 322.949 cv
241.693 322.949 241.737 324.512 241.688 324.834 cv
241.576 325.625 241.752 326.426 241.752 327.315 cv
241.742 328.623 241.532 329.785 241.6 331.094 cv
241.688 332.442 242.084 336.046 241.361 337.071 cv
f
285.102 332.364 mo
284.619 332.364 284.023 332.432 283.647 332.657 cv
282.924 332.647 281.454 333.028 280.878 333.36 cv
279.55 333.36 278.417 333.907 277.216 334.141 cv
276.401 334.298 275.522 334.454 274.75 334.591 cv
274.174 334.669 273.5 334.65 273.002 334.923 cv
272.67 334.962 272.328 335.011 271.986 335.06 cv
271.649 335.099 271.303 335.157 270.961 335.196 cv
270.092 335.187 269.013 335.06 268.344 335.47 cv
268.002 335.519 267.665 335.568 267.318 335.607 cv
265.907 335.607 264.193 335.392 263.099 336.036 cv
262.572 336.036 261.947 335.978 261.498 336.163 cv
260.829 336.163 260.326 336.007 259.755 335.861 cv
259.75 336.163 258.007 336.407 257.714 336.583 cv
256.737 336.573 255.497 336.398 254.657 336.7 cv
254.32 336.759 253.978 336.798 253.641 336.847 cv
252.665 336.837 251.498 336.739 250.717 337.12 cv
250.072 337.111 249.345 337.15 248.827 337.403 cv
247.88 337.403 245.463 337.648 244.896 337.189 cv
243.954 336.446 244.476 327.188 244.515 325.45 cv
244.486 324.561 244.437 323.692 244.408 322.813 cv
244.374 321.895 244.681 318.799 243.099 319.317 cv
242.201 319.317 240.286 319.102 239.618 319.444 cv
238.656 319.434 236.107 319.63 235.545 319.112 cv
234.549 318.165 233.997 314.708 233.485 313.321 cv
232.694 311.29 231.414 309.249 231.141 307.012 cv
231.107 306.778 231.048 306.387 231.204 306.212 cv
231.619 305.714 233.553 305.801 234.295 305.801 cv
236.009 305.821 243.812 305.841 244.447 304.747 cv
244.843 304.024 244.686 301.749 244.618 300.841 cv
244.672 299.434 244.735 298.028 244.789 296.612 cv
244.867 294.444 244.374 291.915 245.023 289.923 cv
249.984 295.274 255.609 300.176 260.717 305.508 cv
261.2 306.114 261.664 306.7 262.142 307.296 cv
263.417 308.575 264.843 309.717 266.156 311.006 cv
269.681 314.473 272.953 318.223 276.401 321.7 cv
279.042 324.376 281.806 326.993 284.452 329.669 cv
284.946 330.157 285.795 330.723 286.025 331.387 cv
286.22 331.895 285.366 332.159 285.102 332.364 cv
f
275.488 194.099 mo
276.289 193.157 277.09 192.204 277.9 191.257 cv
278.842 190.276 279.931 189.509 280.893 188.591 cv
282.168 187.287 283.432 185.984 284.707 184.685 cv
286.147 183.313 287.588 181.931 289.018 180.549 cv
291.836 177.634 294.634 174.719 297.446 171.799 cv
301.767 167.673 306.167 163.601 310.142 159.162 cv
311.157 158.015 312.671 157.062 313.462 155.788 cv
314.175 156.774 313.667 159.367 313.745 160.734 cv
313.931 163.952 313.775 167.438 313.814 170.783 cv
313.892 172.477 313.96 174.177 314.038 175.866 cv
313.941 177.619 313.863 179.367 313.765 181.111 cv
313.843 182.131 313.911 183.161 313.999 184.172 cv
313.97 184.665 313.941 185.139 313.921 185.627 cv
313.98 186.213 314.038 186.794 314.087 187.385 cv
314.028 187.869 313.96 188.342 313.882 188.831 cv
313.657 191.516 313.638 194.211 313.677 196.99 cv
313.804 198.391 313.931 199.802 314.058 201.213 cv
313.98 201.99 313.892 202.756 313.794 203.537 cv
313.784 205.281 313.765 207.034 313.745 208.782 cv
313.706 209.368 313.677 209.939 313.648 210.525 cv
313.677 211.643 313.95 212.795 313.931 213.87 cv
313.892 215.412 313.521 217.038 313.54 218.679 cv
313.677 220.671 313.804 222.659 313.941 224.651 cv
313.853 225.867 313.755 227.073 313.657 228.284 cv
313.726 228.733 313.765 229.162 313.823 229.612 cv
313.853 230.92 313.726 232.248 313.677 233.518 cv
313.736 234.446 313.814 235.374 313.872 236.302 cv
313.872 237.015 313.687 237.679 313.638 238.333 cv
313.54 239.727 313.628 241.133 313.794 242.422 cv
314.048 244.434 313.97 247.071 313.765 249.102 cv
313.696 249.59 313.618 250.079 313.54 250.567 cv
313.472 251.787 313.784 252.871 313.765 254.063 cv
313.677 254.746 313.589 255.411 313.501 256.094 cv
313.531 256.817 313.569 257.539 313.599 258.272 cv
313.56 259.248 313.501 260.215 313.452 261.192 cv
313.443 262.11 314.019 267.344 313.15 267.344 cv
312.583 267.334 307.94 262.266 307.158 261.485 cv
301.362 255.616 295.478 249.649 289.717 243.819 cv
288.799 242.891 288.017 241.797 287.119 240.918 cv
286.298 240.137 285.478 239.336 284.648 238.557 cv
284.238 238.069 283.803 237.561 283.388 237.073 cv
277.807 231.584 272.157 226.018 266.571 220.544 cv
265.571 219.563 258.315 212.297 258.29 211.814 cv
258.32 211.682 258.339 211.545 258.354 211.413 cv
258.915 210.041 261.196 208.513 262.333 207.429 cv
263.569 206.248 264.477 204.929 265.639 203.752 cv
266.679 202.678 267.821 201.643 268.876 200.588 cv
269.272 200.256 269.662 199.924 270.063 199.587 cv
270.971 198.655 271.874 197.712 272.782 196.78 cv
273.686 195.881 274.579 194.998 275.488 194.099 cv
f
242.016 112.989 mo
242.49 112.642 243.002 112.532 243.427 112.068 cv
243.725 111.622 244.018 111.177 244.311 110.736 cv
245.092 109.591 245.908 108.626 246.86 107.623 cv
247.202 107.313 247.548 107 247.89 106.688 cv
248.525 106.348 249.619 106.51 250.405 106.517 cv
252.07 106.524 253.71 106.446 255.209 106.29 cv
255.952 106.209 256.625 106.256 257.25 105.977 cv
258.369 105.997 259.477 106.016 260.595 106.036 cv
261.85 106.18 263.188 106.485 264.526 106.49 cv
265.712 106.502 266.733 106.06 267.875 106.092 cv
268.266 106.165 268.657 106.217 269.047 106.282 cv
270.439 106.443 272.202 106.443 273.413 106.072 cv
273.413 106.114 273.413 106.165 273.413 106.212 cv
273.461 106.212 273.5 106.212 273.564 106.212 cv
273.564 106.404 273.603 106.36 273.413 106.36 cv
273.393 106.439 273.359 106.51 273.339 106.595 cv
271.923 108.47 269.858 109.903 268.212 111.49 cv
265.097 114.539 261.987 117.603 258.881 120.657 cv
258.178 121.375 257.358 121.932 256.665 122.65 cv
253.862 125.509 251.337 128.604 248.471 131.349 cv
247.436 132.355 246.391 133.36 245.366 134.357 cv
244.78 134.85 244.213 135.343 243.642 135.841 cv
242.993 136.608 242.353 137.369 241.713 138.131 cv
239.979 139.967 238.144 141.744 236.283 143.478 cv
235.414 144.498 234.545 145.524 233.681 146.549 cv
231.752 148.414 229.828 150.275 227.914 152.14 cv
224.633 155.358 221.4 158.673 218.104 161.852 cv
217.011 162.882 216.054 164.171 214.853 164.986 cv
214.853 165.04 214.853 165.084 214.853 165.138 cv
214.799 165.138 214.75 165.138 214.701 165.138 cv
214.701 165.094 214.701 165.04 214.701 164.986 cv
214.657 164.986 214.608 164.986 214.55 164.986 cv
214.599 164.552 214.643 164.117 214.686 163.678 cv
214.706 162.672 214.516 161.656 214.618 160.621 cv
214.74 160.084 214.872 159.557 214.984 159.015 cv
215.053 158.014 214.696 157.184 215.165 156.32 cv
215.458 155.782 216.132 155.563 216.561 155.148 cv
217.401 154.313 217.89 153.248 218.91 152.579 cv
219.97 151.871 221.303 151.666 222.45 151.11 cv
223.178 150.739 223.759 150.118 224.447 149.689 cv
226 148.678 227.797 147.809 228.959 146.207 cv
229.271 145.568 229.594 144.938 229.911 144.303 cv
230.297 143.751 230.692 143.195 231.073 142.638 cv
231.376 141.881 231.337 141.022 231.557 140.221 cv
231.854 139.127 232.406 138.131 232.436 136.842 cv
232.299 135.724 232.162 134.615 232.025 133.497 cv
231.874 132.057 231.068 130.763 230.209 129.674 cv
229.843 129.219 229.398 128.775 229.174 128.233 cv
228.891 128.233 229.174 127.857 229.252 127.696 cv
229.491 127.369 229.721 127.042 229.95 126.719 cv
230.951 125.216 231.977 123.585 233.471 122.481 cv
234.228 121.92 234.33 121.111 234.911 120.423 cv
235.6 119.615 236.625 119.188 237.338 118.341 cv
237.704 117.852 238.08 117.352 238.446 116.873 cv
238.749 116.309 238.891 115.723 239.35 115.242 cv
239.818 114.747 240.341 114.517 240.844 114.102 cv
241.235 113.736 241.625 113.36 242.016 112.989 cv
f
157.669 106.583 mo
159.1 106.595 160.887 106.803 162.181 106.454 cv
163.221 106.666 164.398 106.603 165.525 106.627 cv
166.409 106.681 167.273 106.737 168.152 106.778 cv
169.363 106.778 170.569 106.778 171.78 106.776 cv
172.322 106.876 172.855 106.961 173.382 107.064 cv
174.49 107.069 175.799 106.322 176.883 106.688 cv
178.172 107.13 179.281 108.575 180.262 109.571 cv
181.834 111.119 183.387 112.657 184.94 114.205 cv
185.97 115.318 186.952 116.6 188.002 117.694 cv
189.305 119.044 190.731 120.006 192.04 121.376 cv
192.821 122.186 193.29 123.092 194.051 123.888 cv
194.481 124.225 194.925 124.571 195.365 124.903 cv
196.205 125.606 196.976 126.544 197.445 127.481 cv
196.981 127.481 196.297 128.478 195.985 128.795 cv
194.784 130.06 193.836 131.339 193.436 133.009 cv
193.333 133.678 193.236 134.347 193.133 135.021 cv
192.914 136.095 192.635 137.15 192.762 138.361 cv
192.953 139.142 193.138 139.914 193.333 140.69 cv
193.67 141.491 193.998 142.291 194.334 143.087 cv
194.745 143.976 194.94 144.909 195.54 145.734 cv
195.995 146.335 196.766 146.554 197.332 146.984 cv
197.899 147.389 198.128 148.083 198.7 148.507 cv
199.242 148.771 199.784 149.02 200.321 149.264 cv
201.078 149.772 201.82 150.27 202.567 150.768 cv
203.563 151.398 204.779 151.833 205.653 152.663 cv
206.229 153.454 206.795 154.235 207.367 155.021 cv
207.884 155.661 208.729 156.11 209.105 156.862 cv
209.354 157.379 209.549 158.087 209.579 158.703 cv
209.608 159.274 209.461 159.909 209.593 160.456 cv
209.896 161.745 210.419 163.581 210.189 164.962 cv
209.017 164.953 206.581 162.013 205.702 161.149 cv
203.895 159.455 202.079 157.77 200.282 156.081 cv
198.963 154.684 197.655 153.278 196.336 151.877 cv
193.739 149.167 190.931 146.642 188.368 143.976 cv
187 142.541 185.594 141.134 184.212 139.689 cv
183.641 139.015 183.045 138.336 182.464 137.663 cv
177.704 133.009 172.986 128.385 168.26 123.751 cv
167.01 122.389 165.75 121.024 164.485 119.666 cv
161.771 116.92 159.256 114.198 156.419 111.583 cv
155.023 110.282 152.049 108.514 151.551 106.688 cv
153.562 106.7 155.603 106.571 157.669 106.583 cv
f
126.96 250.049 mo
124.831 252.031 123.102 254.336 121.023 256.328 cv
117.951 259.336 114.885 262.324 111.823 265.332 cv
110.807 266.377 109.332 267.461 108.576 268.633 cv
108.532 268.633 108.483 268.633 108.424 268.633 cv
108.419 268.926 108.092 268.106 108.058 267.891 cv
108.048 266.836 108.024 265.762 108.014 264.697 cv
108.073 261.494 108.141 258.291 108.214 255.098 cv
108.229 252.442 108.263 249.902 108.239 247.383 cv
108.21 246.504 108.165 245.625 108.131 244.756 cv
108.185 242.363 108.327 239.717 108.302 237.19 cv
108.268 236.116 108.229 235.051 108.19 233.987 cv
108.219 232.434 108.341 230.822 108.346 229.182 cv
108.307 228.205 108.278 227.243 108.229 226.267 cv
108.248 223.498 108.253 220.739 108.268 217.971 cv
108.234 217.146 108.195 216.32 108.151 215.5 cv
108.248 214.475 108.346 213.445 108.434 212.439 cv
108.512 210.139 108.278 207.971 108.366 205.739 cv
108.449 204.045 108.537 202.346 108.615 200.647 cv
108.576 196.994 108.405 193.376 108.498 189.729 cv
108.61 187.986 108.712 186.233 108.83 184.485 cv
108.766 183.562 108.698 182.639 108.62 181.721 cv
108.59 178.009 108.717 174.225 108.678 170.661 cv
108.639 169.88 108.6 169.103 108.561 168.327 cv
108.62 167.409 108.678 166.486 108.742 165.568 cv
108.751 164.484 108.541 163.459 108.61 162.35 cv
108.688 161.725 108.771 161.1 108.844 160.47 cv
108.82 158.737 108.761 156.96 108.771 155.226 cv
110.26 155.768 111.452 157.414 112.59 158.532 cv
115.114 160.978 117.619 163.424 120.124 165.866 cv
120.993 166.794 121.857 167.716 122.722 168.639 cv
124.611 170.426 126.506 172.248 128.21 174.211 cv
128.786 174.88 129.323 175.563 129.997 176.203 cv
131.237 177.38 132.565 178.459 133.771 179.723 cv
134.294 180.276 134.558 180.881 135.124 181.413 cv
138.029 184.177 141.106 186.76 144.04 189.548 cv
146.838 192.429 149.631 195.315 152.415 198.205 cv
154.187 199.885 165.364 210.373 164.7 211.99 cv
164.499 212.297 164.299 212.6 164.085 212.912 cv
162.776 215.153 159.71 217.678 157.703 219.494 cv
157.004 220.114 156.575 220.954 155.906 221.643 cv
154.255 223.322 152.62 224.914 150.964 226.584 cv
148.679 228.85 146.355 231.106 144.05 233.361 cv
142.536 234.905 141.027 236.448 139.519 237.991 cv
139.133 238.44 138.752 238.88 138.366 239.317 cv
134.558 242.852 130.769 246.514 126.96 250.049 cv
f
188.797 319.454 mo
187.542 319.454 183.348 319.171 182.606 319.669 cv
182.322 319.864 182.293 320.235 182.273 320.577 cv
182.244 324.464 182.21 328.35 182.181 332.227 cv
182.2 333.907 182.4 336.359 182.049 338.029 cv
181.961 338.439 181.731 338.8 181.414 339.064 cv
181.414 339.113 181.414 339.162 181.414 339.22 cv
180.218 339.201 179.158 338.693 178.05 338.517 cv
176.99 338.361 175.886 338.615 174.866 338.615 cv
174.089 338.497 173.308 338.4 172.527 338.302 cv
171.028 338.165 169.519 338.019 168.015 337.873 cv
167.429 337.814 166.502 337.736 165.984 337.96 cv
162.507 337.941 159.28 337.247 155.94 336.925 cv
154.392 336.759 152.888 336.779 151.453 336.525 cv
150.232 336.32 149.011 336.124 147.8 335.919 cv
147.273 335.802 146.726 335.675 146.189 335.558 cv
145.422 335.519 144.655 335.49 143.879 335.441 cv
142.131 335.128 140.373 334.816 138.62 334.503 cv
137.277 334.317 135.573 334.298 134.421 333.712 cv
134.372 333.712 134.323 333.712 134.265 333.712 cv
134.265 333.614 134.265 333.516 134.265 333.419 cv
134.489 333.419 134.372 333.478 134.48 333.311 cv
135.261 332.071 136.76 330.743 137.873 329.728 cv
138.894 328.712 139.904 327.696 140.92 326.661 cv
142.478 325.118 144.162 323.731 145.75 322.169 cv
146.531 321.407 147.312 320.636 148.093 319.874 cv
148.738 319.161 149.382 318.438 150.027 317.725 cv
154.031 313.888 158.123 310.157 162.039 306.153 cv
164.456 303.692 166.687 301.095 169.163 298.722 cv
172.605 295.411 176.003 292.179 179.276 288.731 cv
180.223 287.755 181.19 286.768 182.147 285.782 cv
182.767 286.661 182.391 290.02 182.293 291.173 cv
182.132 293.018 182.098 294.884 182.083 296.847 cv
182.078 298.087 181.922 299.376 182.313 300.45 cv
182.674 301.485 183.406 302.384 184.031 303.302 cv
184.373 303.839 184.554 304.532 185.174 304.884 cv
186.063 305.372 188.87 305.489 190.037 305.44 cv
192.093 305.362 194.227 305.216 196.453 305.225 cv
196.443 306.642 195.54 308.38 195.062 309.63 cv
194.188 311.847 193.309 314.044 192.483 316.28 cv
192.166 317.11 191.883 318.233 191.287 318.927 cv
190.848 319.395 190.242 319.083 189.676 319.307 cv
189.378 319.366 189.09 319.395 188.797 319.454 cv
f
198.704 345.372 mo
197.195 345.216 195.799 344.142 194.446 343.575 cv
193.367 343.126 192.132 342.931 191.145 342.325 cv
191.101 342.325 191.048 342.325 191.004 342.325 cv
191.004 342.267 191.004 342.227 191.004 342.179 cv
191.053 342.179 191.101 342.179 191.15 342.179 cv
191.15 341.974 191.101 342.032 191.292 342.032 cv
193.426 342.042 203.484 342.423 204.397 341.524 cv
204.852 341.075 204.842 339.22 204.847 338.468 cv
204.871 333.77 204.319 327.461 208.64 325.059 cv
209.266 324.698 209.93 324.629 210.609 324.375 cv
211.805 324.375 214.754 324.815 214.608 326.416 cv
214.579 326.797 214.129 326.797 213.787 326.846 cv
210.936 327.188 210.379 328.741 209.202 330.957 cv
208.24 332.754 208.396 335.841 208.343 338.204 cv
208.289 340.509 208.177 342.706 208.162 345.04 cv
208.113 345.04 208.064 345.04 208.02 345.04 cv
208.02 345.304 206.595 345.04 206.268 345.177 cv
205.477 345.167 204.788 345.391 204.085 345.431 cv
202.283 345.411 200.491 345.391 198.704 345.372 cv
f
215.067 348.361 mo
214.569 348.976 214.051 349.572 213.544 350.197 cv
212.274 351.486 210.965 352.677 210.145 354.22 cv
210.101 354.22 210.057 354.22 210.008 354.22 cv
209.114 353.224 208.211 352.238 207.313 351.242 cv
206.434 350.461 204.656 349.445 203.631 348.937 cv
203.631 348.888 203.631 348.849 203.631 348.791 cv
203.582 348.791 203.533 348.791 203.489 348.791 cv
203.489 348.752 203.489 348.703 203.489 348.654 cv
203.533 348.654 203.582 348.654 203.631 348.654 cv
203.636 348.4 203.865 348.488 204.061 348.459 cv
204.598 348.341 205.14 348.224 205.672 348.127 cv
207.381 348.068 209.075 348.009 210.77 347.97 cv
210.848 347.677 210.926 347.384 211.005 347.091 cv
211.078 346.359 211.136 345.636 211.2 344.904 cv
211.131 344.24 211.053 343.556 210.985 342.873 cv
211.024 342.189 211.053 341.515 211.078 340.832 cv
211.063 339.377 210.887 337.794 211.005 336.32 cv
211.18 335.49 211.356 334.66 211.532 333.839 cv
211.717 332.833 211.991 331.603 212.679 330.86 cv
213.378 330.079 214.349 330.157 215.243 329.786 cv
215.531 329.923 215.858 330.079 215.97 330.421 cv
216.278 331.388 216.044 332.677 216.034 333.732 cv
216.073 336.242 216.097 338.761 216.112 341.291 cv
216.21 341.886 216.6 342.404 216.844 342.931 cv
217.206 343.752 217.557 344.562 217.914 345.382 cv
218.055 345.382 218.065 345.373 218.011 345.49 cv
217.372 346.701 216.063 347.521 215.067 348.361 cv
f
220.79 344.396 mo
220.106 343.82 219.618 342.502 219.54 341.603 cv
220.268 341.613 221.093 341.671 221.732 341.476 cv
223.412 341.486 225.072 341.593 226.674 341.652 cv
226.674 341.74 226.674 341.847 226.674 341.945 cv
226.132 341.935 225.463 342.365 225.019 342.57 cv
223.681 343.175 222.328 343.771 220.985 344.377 cv
220.985 344.562 220.907 344.494 220.79 344.396 cv
f
170.417 224.865 mo
170.441 223.547 170.7 222.17 170.71 220.798 cv
170.617 219.289 170.534 217.795 170.456 216.281 cv
170.422 213.786 170.72 211.403 170.769 209.006 cv
170.69 207.541 170.617 206.086 170.544 204.631 cv
170.583 203.517 170.632 202.399 170.666 201.291 cv
170.583 200.173 170.495 199.045 170.417 197.931 cv
170.427 196.115 170.954 194.533 170.998 192.697 cv
170.925 191.681 170.847 190.656 170.759 189.631 cv
170.798 189.054 170.827 188.473 170.866 187.887 cv
170.944 185.724 171.208 183.678 171.218 181.486 cv
171.228 180.001 170.983 177.731 171.374 176.427 cv
171.76 175.075 175.744 170.553 177.117 170.021 cv
177.117 169.977 177.117 169.923 177.117 169.879 cv
177.41 170.997 177.244 172.501 177.122 173.659 cv
176.98 175.06 176.887 176.53 176.936 178.024 cv
177.014 178.991 177.097 179.962 177.185 180.939 cv
177.195 182.78 177.205 184.631 177.214 186.467 cv
177.151 187.297 177.078 188.122 177.019 188.947 cv
177.058 189.924 177.092 190.89 177.126 191.857 cv
177.073 194.435 176.931 197.375 177.004 200.016 cv
177.078 202.887 176.687 205.92 176.765 208.742 cv
176.853 209.806 176.936 210.881 177.014 211.95 cv
177.029 214.133 177.048 216.32 177.058 218.498 cv
176.99 219.523 176.902 220.539 176.824 221.559 cv
176.819 223.259 176.804 224.953 176.799 226.647 cv
176.785 228.693 177.068 232.316 176.481 234.026 cv
176.291 234.573 175.622 234.924 175.31 235.393 cv
174.841 236.037 174.362 236.692 173.893 237.346 cv
173.425 237.795 172.946 238.244 172.482 238.694 cv
171.999 239.609 171.511 240.547 171.037 241.465 cv
170.983 241.465 170.944 241.465 170.896 241.465 cv
170.896 241.513 170.896 241.562 170.896 241.611 cv
170.847 241.611 170.788 241.611 170.744 241.611 cv
170.759 238.869 170.339 235.91 170.305 233.166 cv
170.28 231.545 170.559 229.787 170.647 228.224 cv
170.71 227.023 170.397 225.998 170.417 224.865 cv
f
173.162 242.92 mo
173.875 241.192 174.461 240.664 175.867 239.473 cv
176.629 238.792 177.284 237.952 178.133 237.415 cv
181.859 234.993 187.708 235.012 192.313 235.969 cv
193.202 236.223 194.081 236.467 194.959 236.721 cv
197.894 237.278 200.545 237.62 203.036 239.085 cv
204.666 240.039 206.004 241.377 207.503 242.598 cv
207.889 242.852 208.29 243.106 208.675 243.34 cv
209.364 243.867 210.087 244.981 211.044 244.961 cv
212.411 244.951 213.27 243.193 214.286 242.471 cv
215.414 241.65 216.532 240.762 217.792 240.156 cv
221.22 238.499 224.642 236.78 228.432 235.842 cv
229.799 235.53 231.156 235.208 232.523 234.885 cv
233.305 234.749 234.149 234.836 234.852 234.553 cv
236.01 234.573 237.162 234.592 238.329 234.622 cv
240.258 234.924 242.275 235.872 243.779 237.014 cv
244.448 237.756 245.107 238.489 245.776 239.238 cv
246.845 240.391 248.002 241.611 248.193 243.203 cv
248.144 243.203 248.095 243.203 248.037 243.203 cv
248.032 243.477 246.884 243.35 246.586 243.35 cv
243.53 243.33 240.477 243.32 237.416 243.301 cv
236.303 243.291 234.799 243.086 233.92 243.565 cv
232.904 243.555 231.493 242.94 230.57 243.399 cv
230.243 243.447 229.896 243.496 229.555 243.535 cv
228.407 243.535 227.001 243.36 226.054 243.809 cv
225.556 243.809 224.994 243.906 224.603 244.102 cv
223.617 244.092 221.552 243.848 220.809 244.219 cv
220.375 244.268 219.94 244.307 219.501 244.356 cv
219.071 244.414 218.632 244.453 218.192 244.492 cv
217.499 244.492 216.581 244.59 216.156 245.068 cv
215.907 245.068 216.102 245.84 216.112 246.094 cv
216.171 248.672 214.267 251.016 211.601 250.996 cv
209.447 250.977 207.762 249.434 207.342 247.471 cv
207.206 246.797 207.381 245.85 206.952 245.313 cv
206.766 245.088 206.415 244.942 206.102 245.01 cv
205.082 244.961 204.071 244.902 203.045 244.844 cv
202.811 244.902 202.562 244.942 202.313 244.99 cv
199.93 244.981 197.806 244.678 195.331 244.668 cv
194.705 244.658 193.797 244.541 193.294 244.795 cv
191.541 244.785 189.871 244.629 188.055 244.629 cv
187.196 244.619 186.107 244.531 185.438 244.902 cv
182.879 244.883 180.262 244.678 177.713 244.707 cv
176.81 244.707 175.555 244.492 174.803 244.844 cv
174.021 244.834 173.25 244.824 172.625 244.531 cv
172.625 243.926 172.957 243.418 173.162 242.92 cv
f
252.431 185.139 mo
252.416 183.767 252.162 182.375 252.055 181.062 cv
252.016 180.334 251.977 179.606 251.938 178.869 cv
251.908 178.591 252.016 177.282 251.767 177.272 cv
251.767 177.228 251.767 177.184 251.767 177.131 cv
251.615 177.131 251.469 177.131 251.323 177.131 cv
251.025 179.992 251.181 183.127 251.113 186.155 cv
251.088 187.326 250.571 188.196 250.478 189.216 cv
250.488 189.797 250.493 190.383 250.517 190.959 cv
250.458 191.487 250.414 192.029 250.366 192.561 cv
249.662 192.658 249.164 192.478 249.008 191.794 cv
248.784 190.813 249.267 189.992 249.243 189.065 cv
249.164 188.43 249.111 187.795 249.033 187.156 cv
248.998 183.708 249.311 180.06 249.282 176.681 cv
249.213 176.095 249.164 175.514 249.101 174.943 cv
249.018 174.645 248.94 174.357 248.876 174.059 cv
248.72 174.059 248.578 174.059 248.422 174.054 cv
248.422 174.108 248.422 174.157 248.422 174.201 cv
248.373 174.201 248.329 174.201 248.276 174.201 cv
248.193 176.672 247.914 178.888 247.787 181.33 cv
247.69 181.765 247.602 182.204 247.509 182.639 cv
247.363 182.639 247.221 182.639 247.07 182.639 cv
246.303 180.725 246.542 178.205 246.518 175.939 cv
246.503 174.719 246.635 173.469 246.259 172.443 cv
245.815 173.234 245.844 174.05 245.766 175.055 cv
245.673 176.218 245.595 177.614 245.659 178.844 cv
245.727 180.138 245.971 181.579 245.869 182.927 cv
245.141 191.272 245.527 199.46 245.478 207.961 cv
245.429 209.656 245.39 211.35 245.361 213.049 cv
245.244 214.494 245.009 216.057 244.994 217.575 cv
244.985 219.67 245.131 221.907 245.087 224.123 cv
245.048 226.194 244.814 228.518 244.941 230.666 cv
244.96 230.959 245.009 231.701 245.346 231.701 cv
245.346 231.741 245.346 231.789 245.346 231.838 cv
245.39 231.838 245.439 231.838 245.488 231.838 cv
245.488 231.789 245.488 231.741 245.488 231.701 cv
245.532 231.701 245.595 231.701 245.634 231.701 cv
246.025 230.471 245.898 229.026 245.952 227.619 cv
246.035 225.329 246.323 223.01 246.259 220.627 cv
246.225 219.143 245.912 217.282 246.42 215.866 cv
246.508 215.627 246.689 215.549 246.962 215.627 cv
247.529 215.779 247.656 216.638 247.729 217.151 cv
248.017 218.923 247.69 220.671 247.592 222.536 cv
247.577 223.991 247.568 225.447 247.553 226.907 cv
247.548 228.498 247.446 230.198 247.617 231.711 cv
247.704 232.551 247.524 233.362 247.763 234.143 cv
247.905 234.602 248.002 235.647 248.666 235.647 cv
248.823 233.244 248.915 230.53 248.925 228.069 cv
248.876 226.911 248.808 225.744 248.749 224.573 cv
248.862 223.42 248.969 222.248 249.081 221.091 cv
249.199 220.315 249.316 219.533 249.438 218.752 cv
249.443 217.673 249.111 216.633 248.979 215.686 cv
248.759 214.123 248.798 212.444 248.808 210.744 cv
248.813 209.851 248.818 208.943 249.057 208.147 cv
249.135 207.883 249.555 207.649 249.555 207.405 cv
249.604 207.405 249.658 207.405 249.697 207.405 cv
250.214 207.854 250.532 208.313 250.639 209.021 cv
250.893 210.798 250.766 213.015 250.649 214.826 cv
250.6 215.471 250.39 216.008 250.4 216.721 cv
250.414 218.327 250.829 220.017 250.873 221.677 cv
250.834 222.346 250.805 223.03 250.771 223.713 cv
250.756 226.662 250.737 229.309 250.727 232.307 cv
250.712 234.436 250.908 236.721 251.122 238.733 cv
251.078 239.114 251.025 239.492 250.971 239.883 cv
251.166 239.883 251.362 239.883 251.557 239.883 cv
252.138 238.626 251.967 237.063 252.026 235.511 cv
252.084 233.87 252.328 231.975 252.133 230.285 cv
251.982 229.162 251.821 228.049 251.655 226.916 cv
251.679 225.74 252.045 224.67 252.084 223.43 cv
252.123 221.604 251.811 219.968 251.821 218.186 cv
251.928 216.306 252.04 214.407 252.143 212.507 cv
252.143 211.057 252.157 209.602 252.148 208.147 cv
252.079 207.561 252.001 206.985 251.923 206.399 cv
251.908 205.476 252.167 204.724 252.197 203.782 cv
252.157 202.273 252.119 200.774 252.079 199.265 cv
252.084 196.955 252.241 194.665 252.255 192.273 cv
252.275 189.812 252.455 187.502 252.431 185.139 cv
cp
247.26 207.556 mo
247.202 207.698 246.342 208.913 246.347 208.108 cv
246.147 207.678 246.201 207.014 246.196 206.506 cv
246.157 205.178 246.181 203.669 246.147 202.287 cv
246.142 200.451 246.127 198.596 246.117 196.76 cv
246.127 195.271 245.986 193.713 246.576 192.536 cv
247.016 192.751 247.353 193.122 247.485 193.586 cv
247.914 195.198 247.573 197.033 247.563 198.806 cv
247.553 201.213 248.173 205.447 247.26 207.556 cv
cp
247.636 186.286 mo
247.636 186.335 247.636 186.384 247.631 186.428 cv
246.498 186.203 246.303 185.315 246.923 184.392 cv
247.524 184.68 248.202 186.286 247.636 186.286 cv
cp
249.858 204.201 mo
249.76 204.201 249.672 204.201 249.579 204.201 cv
249.111 203.049 249.282 201.936 249.291 200.564 cv
249.306 198.821 248.92 197.068 249.76 195.608 cv
250.219 195.705 250.575 195.837 250.776 196.267 cv
251.205 197.258 251.142 204.216 249.858 204.201 cv
f
243.305 200.666 mo
243.227 199.802 243.149 198.928 243.061 198.049 cv
243.022 194.397 243.232 190.647 243.251 187.141 cv
243.217 186.018 243.178 184.899 243.139 183.771 cv
243.105 180.998 243.159 178.297 243.002 175.626 cv
242.846 174.792 242.704 173.966 242.548 173.131 cv
242.397 172.174 242.592 171.085 242.651 170.099 cv
242.656 169.762 242.748 168.786 242.338 168.781 cv
241.635 168.444 240.829 168.6 240.018 168.561 cv
239.071 168.502 238.138 168.322 237.103 168.312 cv
236.01 168.698 234.657 168.576 233.485 168.795 cv
228.095 169.806 223.056 170.587 218.392 173.063 cv
217.25 173.673 216.019 174.328 215.145 175.377 cv
214.481 176.173 214.462 177.169 214.306 178.224 cv
213.925 180.705 213.934 183.356 213.847 186.091 cv
213.749 187.453 213.651 188.811 213.554 190.173 cv
213.529 192.15 213.524 194.143 213.5 196.135 cv
213.407 196.911 213.329 197.687 213.236 198.459 cv
213.056 200.305 213.104 202.346 213.036 204.143 cv
212.938 206.931 213.099 209.768 213.158 212.443 cv
213.222 215.002 213.056 217.77 213.085 220.446 cv
213.148 221.174 213.212 221.896 213.27 222.634 cv
213.212 223.068 213.163 223.508 213.104 223.942 cv
213.095 225.173 213.339 226.384 213.329 227.727 cv
213.309 231.311 213.217 235.92 214.642 238.772 cv
214.716 238.909 215.165 239.551 215.165 239.238 cv
216.776 238.616 218.207 237.366 219.716 236.545 cv
221.054 235.813 222.509 235.374 223.851 234.661 cv
225.477 233.792 226.322 233.186 228.446 233.205 cv
229.047 232.814 230.839 232.482 231.654 232.492 cv
232.001 232.443 232.333 232.404 232.665 232.355 cv
232.963 232.307 233.256 232.268 233.539 232.209 cv
235.087 231.447 238.685 232.15 240.243 232.541 cv
241.01 232.736 241.791 232.932 242.573 233.127 cv
242.944 230.881 242.577 228.332 242.524 226.14 cv
242.602 224.885 242.685 223.625 242.768 222.365 cv
242.783 220.778 242.665 219.182 242.695 217.697 cv
242.773 216.916 242.861 216.14 242.939 215.368 cv
243.032 213.532 242.924 211.774 243.022 209.982 cv
243.076 208.942 243.242 207.834 243.266 206.779 cv
243.305 204.768 243.369 202.741 243.305 200.666 cv
cp
216.298 206.13 mo
219.799 202.873 224.345 201.271 228.617 199.533 cv
229.974 198.977 231.556 197.99 233.158 198 cv
233.695 197.58 234.916 196.984 235.634 196.989 cv
235.634 196.936 235.634 196.896 235.634 196.843 cv
236.478 196.984 237.118 197.341 237.142 198.303 cv
237.167 199.133 236.752 199.802 236.117 200.227 cv
234.843 201.071 233.314 201.218 231.849 201.721 cv
230.204 202.268 228.49 202.893 226.83 203.395 cv
225.692 203.742 224.555 203.986 223.475 204.421 cv
221.513 205.217 219.555 206.232 217.738 207.326 cv
217.094 207.717 216.425 208.327 215.609 208.356 cv
215.409 208.361 215.194 208.342 215.062 208.205 cv
214.364 207.502 215.888 206.491 216.298 206.13 cv
cp
236.625 218.01 mo
235.438 218.718 233.861 218.713 232.469 219.016 cv
231.205 219.279 229.955 219.67 228.666 219.963 cv
224.335 220.954 220.741 222.697 217.04 224.914 cv
216.581 225.178 215.365 226.345 214.906 225.49 cv
214.569 224.899 215.468 224.289 215.829 223.967 cv
217.279 222.702 218.759 221.857 220.326 220.881 cv
222.064 219.797 223.798 218.83 225.712 218.088 cv
226.322 217.756 226.932 217.429 227.548 217.092 cv
229.931 216.154 232.391 215.568 234.813 214.748 cv
235.492 214.748 236.205 214.758 236.766 215.041 cv
237.938 215.656 237.631 217.404 236.625 218.01 cv
cp
236.859 182.404 mo
236.307 182.79 235.477 182.951 234.838 183.142 cv
233.187 183.635 231.547 184.143 229.896 184.645 cv
227.64 185.349 225.321 186.203 223.212 187.243 cv
221.727 188.107 220.243 188.967 218.744 189.836 cv
218.5 189.958 216.454 191.032 216.459 190.471 cv
216.4 190.471 216.361 190.471 216.307 190.471 cv
216.503 188.937 218.27 187.893 219.472 187.19 cv
220.048 186.779 220.634 186.369 221.21 185.944 cv
222.689 184.997 224.281 184.084 225.848 183.356 cv
227.509 182.575 229.266 182.155 231.015 181.569 cv
231.615 181.296 232.206 181.037 232.792 180.778 cv
233.578 180.5 234.364 180.217 235.15 179.953 cv
235.756 179.958 236.459 179.904 237.001 180.085 cv
238.134 180.485 237.577 181.877 236.859 182.404 cv
f
209.847 181.257 mo
209.646 179.108 209.93 176.842 208.719 175.216 cv
206.443 172.14 203.333 171.022 200.008 169.772 cv
199.114 169.469 198.24 169.157 197.347 168.849 cv
196.341 168.659 195.34 168.473 194.324 168.283 cv
192.781 167.897 191.004 167.575 189.353 167.492 cv
187.019 167.467 184.7 167.453 182.371 167.428 cv
181.678 167.741 180.54 167.633 180.086 168.317 cv
179.637 169.001 179.871 171.647 179.871 172.658 cv
179.851 176.598 179.676 180.529 179.651 184.592 cv
179.637 186.97 179.617 189.353 179.598 191.721 cv
179.461 193.713 179.329 195.705 179.197 197.697 cv
179.139 199.118 179.715 200.412 179.676 201.916 cv
179.612 204.836 179.554 208.049 179.495 211.086 cv
179.388 212.351 179.3 213.615 179.192 214.865 cv
179.148 217.458 179.339 219.88 179.285 222.444 cv
179.192 223.708 179.09 224.963 178.992 226.218 cv
178.982 227.444 179.358 228.459 179.348 229.572 cv
179.344 230.881 179.099 232.131 179.09 233.498 cv
179.617 233.508 180.154 233.518 180.691 233.518 cv
181.092 233.322 181.648 233.225 182.141 233.225 cv
182.552 233.03 183.113 232.951 183.601 232.951 cv
183.948 232.893 184.285 232.854 184.617 232.815 cv
186.004 232.199 189.773 232.981 191.184 233.205 cv
192.976 233.518 194.646 233.449 196.394 233.821 cv
198.45 234.251 201.565 235.442 203.343 236.487 cv
203.973 236.858 207.556 239.629 207.879 239.629 cv
207.879 239.59 207.879 239.541 207.879 239.492 cv
208.806 237.952 208.714 236.458 208.982 234.553 cv
209.275 232.404 209.319 230.217 209.412 227.854 cv
209.524 224.509 209.724 221.071 209.744 217.663 cv
209.715 216.208 209.685 214.748 209.646 213.298 cv
209.803 209.104 209.764 205.032 209.852 200.92 cv
209.984 194.494 210.413 187.658 209.847 181.257 cv
cp
204.563 225.437 mo
202.073 224.265 199.412 223.322 196.736 222.483 cv
195.808 222.194 194.842 222.072 193.865 221.877 cv
192.449 221.584 190.97 221.174 189.48 220.945 cv
187.83 220.686 186.14 220.617 184.549 220.271 cv
184.368 220.197 184.187 220.124 184.007 220.061 cv
182.693 219.333 182.674 216.779 184.568 216.799 cv
184.568 216.75 184.568 216.701 184.568 216.643 cv
185.755 216.648 186.624 216.955 187.639 217.17 cv
188.694 217.4 189.773 217.502 190.808 217.756 cv
191.687 218.078 192.566 218.401 193.44 218.713 cv
196.038 219.548 198.406 220.412 200.838 221.56 cv
201.414 221.775 201.985 221.989 202.566 222.19 cv
203.953 222.805 205.96 224.279 206.961 225.476 cv
207.342 225.905 207.952 226.169 207.952 226.819 cv
206.736 226.975 205.55 225.901 204.563 225.437 cv
cp
208.045 209.494 mo
207.942 209.533 207.845 209.573 207.742 209.602 cv
207.683 209.611 207.639 209.631 207.586 209.641 cv
206.57 209.787 202.464 206.423 201.219 205.842 cv
199.759 205.149 198.25 204.592 196.736 204.006 cv
194.71 203.225 192.737 202.326 190.457 202.024 cv
189.588 201.916 188.728 201.804 187.845 201.682 cv
186.658 201.623 184.803 201.892 183.924 201.189 cv
182.84 200.315 183.543 198.005 184.969 198.01 cv
184.969 197.966 184.969 197.922 184.969 197.873 cv
191.399 198.323 196.961 201.267 202.185 204.201 cv
203.592 204.997 207.234 207.194 207.976 208.664 cv
208.059 208.83 208.328 209.499 208.045 209.494 cv
cp
208.611 191.306 mo
208.445 191.623 207.918 191.643 207.6 191.584 cv
206.736 191.399 206.087 190.608 205.354 190.173 cv
204.51 189.694 203.66 189.221 202.81 188.742 cv
198.289 186.452 193.186 185.124 188.25 183.757 cv
186.829 183.361 184.978 183.454 183.758 182.688 cv
182.752 182.053 182.732 180.705 183.606 179.958 cv
185.73 179.967 187.439 180.647 189.305 181.203 cv
189.871 181.311 190.437 181.428 190.989 181.545 cv
192.215 181.877 193.391 182.38 194.549 182.849 cv
195.584 183.205 196.609 183.572 197.654 183.928 cv
198.142 184.201 198.645 184.475 199.129 184.734 cv
200.555 185.398 201.971 186.071 203.387 186.736 cv
204.265 187.151 209.148 190.188 208.611 191.306 cv
f
200.762 53.218 mo
198.553 53.479 196.338 53.753 194.126 54.014 cv
192.217 54.314 190.337 54.653 188.26 54.727 cv
183.738 55.596 179.219 56.46 174.695 57.327 cv
168.337 58.626 162.312 61.304 156.484 63.716 cv
145.561 68.218 135.265 73.45 125.351 79.989 cv
123.002 81.529 106.615 93.016 106.617 94.803 cv
109.286 95.013 111.967 95.23 114.638 95.438 cv
121.069 95.816 127.787 95.572 134.177 95.572 cv
138.129 95.767 142.087 95.975 146.035 96.165 cv
147.593 95.438 150.075 95.816 151.968 95.814 cv
157.37 95.809 162.507 96.153 167.663 96.148 cv
170.32 95.032 174.607 96.009 177.43 96.109 cv
186.148 96.111 194.869 96.114 203.589 96.116 cv
213.358 96.336 223.126 96.558 232.889 96.773 cv
250.914 96.534 268.942 96.282 286.96 96.043 cv
288.3 95.56 290.3 96.031 291.85 96.033 cv
294.98 96.114 298.129 96.209 301.252 96.295 cv
302.875 96.214 304.506 96.136 306.138 96.05 cv
309.209 96.136 312.602 96.446 315.901 96.346 cv
316.614 96.314 318.669 96.458 319.406 96.458 cv
321.619 96.458 317.636 93.301 316.948 92.525 cv
314.675 89.964 312.151 88.199 309.458 86.409 cv
307.849 85.137 306.247 83.863 304.631 82.591 cv
301.342 80.386 298.044 78.201 294.753 75.996 cv
274.147 63.555 254.259 56.209 228.651 53.677 cv
224.932 53.606 221.224 53.533 217.508 53.452 cv
212.098 53.369 206.258 53.213 200.762 53.218 cv
0 .905669 .750851 .00283818 cmyk
f
97.941 102.85 mo
95.7 105.133 92.382 108.456 90.138 110.736 cv
85.49 116.996 80.846 123.253 76.2 129.518 cv
66.427 145.993 60.46 163.136 56.249 182.36 cv
55.56 185.427 55.575 188.474 55.275 191.726 cv
53.773 207.565 53.336 225.373 55.868 240.991 cv
56.559 243.579 57.25 246.157 57.936 248.721 cv
58.714 252.983 59.349 256.919 60.685 260.884 cv
62.025 264.175 63.37 267.446 64.706 270.723 cv
66.31 275.542 68.756 279.878 71.048 284.331 cv
76.483 294.917 82.785 304.976 90.446 314.546 cv
91.564 315.928 94.362 319.81 96.347 319.81 cv
96.349 319.693 96.349 319.585 96.349 319.463 cv
97.89 316.539 96.818 307.686 96.706 304.102 cv
96.684 298.067 96.669 292.027 96.657 285.972 cv
96.649 280.576 96.44 274.868 96.706 269.233 cv
97.255 257.212 96.784 244.761 96.967 232.595 cv
97.111 222.311 97.641 211.726 97.633 201.208 cv
97.624 191.325 97.043 180.476 97.887 170.9 cv
97.809 169.835 97.731 168.776 97.643 167.702 cv
97.631 164.689 97.626 161.666 97.616 158.649 cv
97.782 154.474 97.956 150.304 98.124 146.124 cv
97.846 137.14 97.904 128.009 97.611 118.875 cv
97.394 112.462 98.188 106.29 97.941 102.85 cv
f
328.008 103.832 mo
327.515 109.977 328.538 119.518 328.447 125.993 cv
328.228 139.934 328.176 153.786 328.186 168.22 cv
328.208 191.77 328.215 213.147 328.235 235.897 cv
328.245 248.619 327.6 261.309 328.228 274.249 cv
328.181 279.488 328.15 284.727 328.096 289.957 cv
328.108 299.576 329.204 309.63 327.188 318.883 cv
327.053 319.435 325.811 323.57 326.797 323.57 cv
330.09 323.57 345.216 301.734 347.335 298.248 cv
348.858 295.46 350.384 292.687 351.907 289.903 cv
352.742 288.014 353.585 286.124 354.42 284.219 cv
357.357 279.009 360.723 272.676 362.694 266.944 cv
366.815 254.835 369.307 242.388 371.046 229.045 cv
371.615 224.67 371.444 220.442 371.52 215.813 cv
371.627 213.372 371.732 210.93 371.837 208.494 cv
371.62 195.432 370.091 181.614 366.724 169.997 cv
363.389 158.523 358.192 147.355 352.474 137.014 cv
350.474 133.4 347.994 130.089 345.765 126.574 cv
342.784 121.879 329.976 102.357 328.008 103.832 cv
f
307.026 340.192 mo
298.083 346.916 279.499 347.629 267.672 349.069 cv
264.64 349.46 261.61 349.845 258.568 350.221 cv
243.814 350.929 224.385 352.301 219.078 367.458 cv
218.533 369.093 218.587 369.435 218.03 371.066 cv
217.789 372.511 224.612 371.144 227.747 371.139 cv
228.65 370.685 230.12 370.797 231.243 370.793 cv
231.934 370.666 232.635 370.558 233.333 370.441 cv
235.076 369.474 237.769 369.386 239.959 369.381 cv
241.417 368.649 243.397 368.683 245.196 368.683 cv
247.11 367.633 251.793 366.925 254.254 366.925 cv
258.424 365.5 262.596 364.064 266.759 362.619 cv
278.578 357.824 291.134 353.005 301.239 344.914 cv
302.731 343.713 304.616 343.327 307.026 340.192 cv
f
123.229 343.16 mo
125.849 346.319 129.572 347.042 132.833 349.264 cv
134.694 350.636 137.418 352.056 139.262 353.414 cv
146.406 356.837 151.809 359.644 159.106 362.066 cv
167.133 364.732 174.99 367.271 183.63 368.844 cv
186.548 369.381 206.455 372.994 207.195 371.134 cv
208.394 368.116 201.904 360.728 199.646 358.814 cv
197.544 357.032 194.99 355.899 192.681 354.63 cv
190.452 353.409 187.832 352.701 185.374 352.032 cv
182.127 351.134 178.982 350.098 175.524 349.517 cv
172.214 348.961 168.94 348.936 165.446 348.604 cv
162.407 348.121 159.382 347.623 156.337 347.13 cv
152.402 346.597 148.461 346.641 144.533 346.153 cv
137.313 345.26 130.575 343.604 123.229 343.16 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
